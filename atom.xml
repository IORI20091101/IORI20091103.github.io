<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐吉诃德的小站</title>
  
  
  <link href="https://sdongzhi.com/atom.xml" rel="self"/>
  
  <link href="https://sdongzhi.com/"/>
  <updated>2021-09-26T09:54:12.685Z</updated>
  <id>https://sdongzhi.com/</id>
  
  <author>
    <name>多弗朗明哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sdongzhi.com/2021/09/26/hello-world/"/>
    <id>https://sdongzhi.com/2021/09/26/hello-world/</id>
    <published>2021-09-26T09:54:12.685Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Gatsby入门</title>
    <link href="https://sdongzhi.com/2021/01/22/gatsby/"/>
    <id>https://sdongzhi.com/2021/01/22/gatsby/</id>
    <published>2021-01-22T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gatsby"><a href="#Gatsby" class="headerlink" title="Gatsby"></a>Gatsby</h1><p><a href="https://www.gatsbyjs.com/">Gatsby</a>是React的开源框架用于创建网站和应用程序。 无论用来构建个人博客或者公司主页都是一个不错的选择，本文做一个简单的功能介绍和入门。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先，以Mac为例 首先安装 <a href="https://brew.sh/"><code>brew</code></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Homebrew</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">brew -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装命令行工具</span></span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Nodejs</span></span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>安装**<code>gatsby-cli</code>**</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gatsby-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功可以看到可用命令</span></span><br><span class="line">gatsby --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以快速生成一个站点</span></span><br><span class="line"></span><br><span class="line">gatsby new [SITE_DIRECTORY_NAME] [URL_OF_STARTER_GITHUB_REPO]</span><br><span class="line"></span><br><span class="line">gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> hello-world</span><br><span class="line"></span><br><span class="line">gatsby develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 http://localhost:8000/ 就可以看到</span></span><br></pre></td></tr></table></figure><p>目录如下</p><p><img src="%E5%B0%86%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%2033f5f91bda404798bda15f55e9f1bf96/directory.png" alt="%E5%B0%86%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%2033f5f91bda404798bda15f55e9f1bf96/directory.png" loading="lazy"></p><p><code>src/pages/index.js</code> 即是首页地址，按照约定 <code>src/pages</code> 下面所有的文件都是一个页面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> `<span class="attr">purple</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Gatsby!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>What a world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://source.unsplash.com/random/400x200&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们新加一个页面 <code>src/pages/about.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> `<span class="attr">teal</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Gatsby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Such wow. Very React.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就有了两个页面分别是通过访问 <a href="http://localhost:8000/">http://localhost:8000</a> 和 <a href="https://localhost:8000/about">https://localhost:8000/about</a> 访问。 到这里就可以愉快的添加页面了。</p><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>在上面的页面中假设我们页面有公共的<code>header</code> 或 <code>footer</code>，我们不需要在每个页面中定义，这时候就需要用到组件，同样的Gatsby约定 <code>src/components</code> 文件夹下的都是放的组件，我们新建一个<code>src/components/header.js</code>的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.headerText&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在about页面中使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;../components/header&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> `<span class="attr">teal</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Header</span> <span class="attr">headerText</span>=<span class="string">&quot;About Gatsby&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Such wow. Very React.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里页面已经大概出来了，我也通过 <code>[surge.sh](https://surge.sh/)</code> 部署了一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --global surge</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then create a (free) account with them</span></span><br><span class="line">surge login</span><br><span class="line"><span class="comment"># 提示输入邮箱密码</span></span><br><span class="line"></span><br><span class="line">gatsby build</span><br><span class="line"></span><br><span class="line">ls public</span><br><span class="line"></span><br><span class="line">surge public/</span><br></pre></td></tr></table></figure><p>通过访问</p><p><a href="https://arrogant-station.surge.sh/">https://arrogant-station.surge.sh/</a></p><p><a href="https://arrogant-station.surge.sh/about/">https://arrogant-station.surge.sh/about/</a></p><p> 就可以看到刚刚的效果</p><h3 id="自定义样式表"><a href="#自定义样式表" class="headerlink" title="自定义样式表"></a>自定义样式表</h3><p>当我们想自定义样式时，我们可以在src下的styles下建立global.css，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── pages</span><br><span class="line">│       └── index.js</span><br><span class="line">│   └── styles</span><br><span class="line">│       └── global.css</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ * <span class="attribute">src</span>/styles/global<span class="selector-class">.css</span> */</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lavenderblush;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让该文件生效，需要在项目根目录下新建一个 <code>gatsby-browser.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./src/styles/global.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or:</span></span><br><span class="line"><span class="comment">// require(&#x27;./src/styles/global.css&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="创建组件级作用域的样式"><a href="#创建组件级作用域的样式" class="headerlink" title="创建组件级作用域的样式"></a>创建组件级作用域的样式</h3><p>我们创建一个 <code>Container</code> 组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── components</span><br><span class="line">│       └── container.js</span><br><span class="line">│       └── container.module.css</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们以  <code>.module.css</code> 作为后缀即可创建一个组件级别作用域样式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> containerStyles <span class="keyword">from</span> <span class="string">&quot;./container.module.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Container</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;containerStyles.container&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3rem</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个页面用来使用这个组件 <code>src/pages/about-css-modules.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">&quot;../components/container&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Css Modules<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS Module are cool<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用插件和布局组件"><a href="#使用插件和布局组件" class="headerlink" title="使用插件和布局组件"></a>使用插件和布局组件</h3><p>Gatsby 有着丰富的组件库 <code>[Plugin Library](https://www.gatsbyjs.com/plugins)</code> ,我们使用组件的一个初衷就是让构建站点或博客变得简单。我们将通过使用 <code>[gatsby-plugin-typography](https://www.gatsbyjs.com/plugins/gatsby-plugin-typography/)</code> 来了解如何使用插件</p><blockquote><p><code>[Typography.js](https://kyleamathews.github.io/typography.js/)</code> is a JavaScript library which generates global base styles for your site’s typography. The library has a corresponding Gatsby plugin to streamline using it in a Gatsby site.</p></blockquote><p>首先我们安装这个插件以及相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gatsby-plugin-typography react-typography typography typography-theme-fairy-gates</span><br></pre></td></tr></table></figure><p>修改 <code>gatsby-config.js</code> 如下 ，关于该文件的详细配置在**<code>[这里](https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/)</code> 。**</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">`gatsby-plugin-typography`</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">pathToConfigModule</span>: <span class="string">`src/utils/typography`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typography.js 需要一个配置文件放到 <code>src/utils/typography.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&quot;typography&quot;</span></span><br><span class="line"><span class="keyword">import</span> fairyGateTheme <span class="keyword">from</span> <span class="string">&quot;typography-theme-fairy-gates&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typography = <span class="keyword">new</span> Typography(fairyGateTheme)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; scale, rhythm, options &#125; = typography</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> typography</span><br></pre></td></tr></table></figure><p>这样就可以愉快的使用选中的主题来作为网站的基本样式了。接下来自定义<code>Layout</code> 组件，<code>src/components/layout.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/layout.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> `<span class="attr">3rem</span> <span class="attr">auto</span>`, <span class="attr">maxWidth:</span> <span class="attr">650</span>, <span class="attr">padding:</span> `<span class="attr">0</span> <span class="attr">1rem</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"><span class="keyword">const</span> ListLink = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> `<span class="attr">inline-block</span>`, <span class="attr">marginRight:</span> `<span class="attr">1rem</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;props.to&#125;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> `<span class="attr">3rem</span> <span class="attr">auto</span>`, <span class="attr">maxWidth:</span> <span class="attr">650</span>, <span class="attr">padding:</span> `<span class="attr">0</span> <span class="attr">1rem</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginBottom:</span> `<span class="attr">1.5rem</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">textShadow:</span> `<span class="attr">none</span>`, <span class="attr">backgroundImage:</span> `<span class="attr">none</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> `<span class="attr">inline</span>` &#125;&#125;&gt;</span>MySweetSite<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> `<span class="attr">none</span>`, <span class="attr">cssFloat:</span> `<span class="attr">right</span>` &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ListLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">ListLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ListLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">ListLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ListLink</span> <span class="attr">to</span>=<span class="string">&quot;/contact/&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">ListLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi! I&#x27;m building a fake Gatsby site as part of a tutorial!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        What do I like to do? Lots of course but definitely enjoy building</span></span><br><span class="line"><span class="xml">        websites.</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://source.unsplash.com/random/400x200&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里我们已经有了一个大概的博客模型，效果可以在这里看到 <a href="https://wretched-weight.surge.sh/">https://wretched-weight.surge.sh</a></p><p>不过在这个过程中碰到一个<code>css</code> 被  强制转成 <code>cssFloat</code> 的问题issue地址在这里 <a href="https://github.com/stylelint/stylelint/issues/4490">https://github.com/stylelint/stylelint/issues/4490</a></p><h3 id="使用数据Graphql"><a href="#使用数据Graphql" class="headerlink" title="使用数据Graphql"></a>使用数据Graphql</h3><p>我们新建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatsby new gatsby-lesson-two https://github.com/gatsbyjs/gatsby-starter-hello-world</span><br></pre></td></tr></table></figure><p>然后安装插件以及新的主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gatsby-plugin-typography typography react-typography typography-theme-kirkham gatsby-plugin-emotion @emotion/react</span><br></pre></td></tr></table></figure><p>大部分代码跟之前类似，直接上代码，我会在最后把代码地址贴上来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/layout.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;@emotion/react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; rhythm &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/typography&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">margin:</span> <span class="attr">0</span> <span class="attr">auto</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">max-width:</span> <span class="attr">700px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">padding:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">2</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">padding-top:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">1.5</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">margin-bottom:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">2</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">display:</span> <span class="attr">inline-block</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">font-style:</span> <span class="attr">normal</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          Pandas Eating Lots</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">about</span>/`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">float:</span> <span class="attr">right</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        About</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Amazing Pandas Eating Things<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">src</span>=<span class="string">&quot;https://2.bp.blogspot.com/-BMP2l6Hwvp4/TiAxeGx4CTI/AAAAAAAAD_M/XlC_mY3SoEw/s1600/panda-group-eating-bamboo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">alt</span>=<span class="string">&quot;Group of pandas eating bamboo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// about.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About &#123;data.site.siteMetadata.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        We&#x27;re the only site running on your computer dedicated to showing the</span></span><br><span class="line"><span class="xml">        best photos and videos of pandas eating lots of food.</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query &#123;</span></span><br><span class="line"><span class="string">    site &#123;</span></span><br><span class="line"><span class="string">      siteMetadata &#123;</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/typography.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&quot;typography&quot;</span></span><br><span class="line"><span class="keyword">import</span> kirkhamTheme <span class="keyword">from</span> <span class="string">&quot;typography-theme-kirkham&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typography = <span class="keyword">new</span> Typography(kirkhamTheme)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> typography</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rhythm = typography.rhythm</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gatsby-config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">siteMetadata</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">`Title from siteMetadata`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">`gatsby-plugin-emotion`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">`gatsby-plugin-typography`</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">pathToConfigModule</span>: <span class="string">`src/utils/typography`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果如下  <a href="https://clumsy-texture.surge.sh/">https://clumsy-texture.surge.sh/</a></p><p><img src="https://www.gatsbyjs.com/static/9a136a7536d2f4b315d446f6a1a83725/321ea/start.png" alt="https://www.gatsbyjs.com/static/9a136a7536d2f4b315d446f6a1a83725/321ea/start.png" loading="lazy"></p><p>在 <code>about</code> 页面中我们通过 graphql 来查询到了 siteMetadata中的数据并进行了渲染，接下来我们将继续学习使用 <code>StaticQuery</code> ，它允许我们在非页面组件中（比如 <code>layout.js</code>）来查询数据,我们修改layout.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/layout.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;@emotion/react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStaticQuery, Link, graphql &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; rhythm &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/typography&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = useStaticQuery(</span><br><span class="line">    graphql<span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        site &#123;</span></span><br><span class="line"><span class="string">          siteMetadata &#123;</span></span><br><span class="line"><span class="string">            title</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">margin:</span> <span class="attr">0</span> <span class="attr">auto</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">max-width:</span> <span class="attr">700px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">padding:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">2</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">padding-top:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">1.5</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">margin-bottom:</span> $&#123;<span class="attr">rhythm</span>(<span class="attr">2</span>)&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">display:</span> <span class="attr">inline-block</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">font-style:</span> <span class="attr">normal</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          &#123;data.site.siteMetadata.title&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">about</span>/`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">float:</span> <span class="attr">right</span>;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        About</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止已经可以通过graphql来获取数据无论是页面还是组件中都可以愉快的工作了。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>安装 <a href="https://www.gatsbyjs.com/plugins/gatsby-source-filesystem/">gatsby-source-filesystem</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gatsby-source-filesystem</span><br></pre></td></tr></table></figure><p>然后在<code>gatsby-config.js</code>中增加一段新的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  siteMetadata: &#123;</span><br><span class="line">    title: `Pandas Eating Lots`,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      resolve: `gatsby-source-filesystem`,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: `src`,</span><br><span class="line">        path: `<span class="variable">$&#123;__dirname&#125;</span>/src/`,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    `gatsby-plugin-emotion`,</span><br><span class="line">    &#123;</span><br><span class="line">      resolve: `gatsby-plugin-typography`,</span><br><span class="line">      options: &#123;</span><br><span class="line">        pathToConfigModule: `src/utils/typography`,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在调试请求的页面中 <a href="http://localhost:8000/___graphql">http://localhost:8000/___graphql</a> 看到结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">query MyQuery &#123;</span><br><span class="line">  allFile(sort: &#123;fields: sourceInstanceName, order: ASC&#125;) &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        id</span><br><span class="line">        base</span><br><span class="line">        accessTime</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allFile&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;edges&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4adb1b72-3a75-57ee-87d7-a61196fe33a9&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;base&quot;</span>: <span class="string">&quot;typography.js&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;accessTime&quot;</span>: <span class="string">&quot;2021-01-21T09:40:46.525Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2ac5932a-8346-5197-9dd4-cd96775203f8&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;base&quot;</span>: <span class="string">&quot;about.js&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;accessTime&quot;</span>: <span class="string">&quot;2021-01-21T09:40:46.525Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;e4f28a9d-ce43-59ea-9e93-607960b0f563&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;base&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;accessTime&quot;</span>: <span class="string">&quot;2021-01-21T09:40:46.526Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;ecdff8d0-0225-5f40-966d-84b66a4c3a56&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;base&quot;</span>: <span class="string">&quot;layout.js&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;accessTime&quot;</span>: <span class="string">&quot;2021-01-21T09:40:46.527Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;extensions&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们新建一个页面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/pages/my-files.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">MyFiles</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query &#123;</span></span><br><span class="line"><span class="string">    allFile &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          relativePath</span></span><br><span class="line"><span class="string">          prettySize</span></span><br><span class="line"><span class="string">          extension</span></span><br><span class="line"><span class="string">          birthTime(fromNow: true)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>通过访问 <a href="http://localhost:8000/my-files">http://localhost:8000/my-files</a> 即可看到我们请求到的数据详情</p><h3 id="转换插件"><a href="#转换插件" class="headerlink" title="转换插件"></a>转换插件</h3><p>通常来说我们的博客数据都存储在一个Markdown文件中 <code>src/pages/sweet-pandas-eating-sweets.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;Sweet Pandas Eating Sweets&quot;</span><br><span class="line"><span class="section">date: &quot;2017-08-10&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Pandas are really sweet.</span><br><span class="line"></span><br><span class="line">Here&#x27;s a video of a panda eating sweets.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;560&quot;</span> <span class="attr">height</span>=<span class="string">&quot;315&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/4n0xNbfJLR8&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们如果我们想让该文件正常显示需要将其转换成我们需要的样子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gatsby-transformer-remark</span><br></pre></td></tr></table></figure><p>gatsby-config.js中增加一个新的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  siteMetadata: &#123;</span><br><span class="line">    title: `Pandas Eating Lots`,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      resolve: `gatsby-source-filesystem`,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: `src`,</span><br><span class="line">        path: `<span class="variable">$&#123;__dirname&#125;</span>/src/`,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    `gatsby-transformer-remark`,</span><br><span class="line">    `gatsby-plugin-emotion`,</span><br><span class="line">    &#123;</span><br><span class="line">      resolve: `gatsby-plugin-typography`,</span><br><span class="line">      options: &#123;</span><br><span class="line">        pathToConfigModule: `src/utils/typography`,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们查询接口的位置会显示两个新的选项 <code>allMarkdownRemark</code> 和 <code>markdownRemark</code> 通过查询我们可以看到结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query MyQuery &#123;</span><br><span class="line">  allMarkdownRemark &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        id</span><br><span class="line">        frontmatter &#123;</span><br><span class="line">          date</span><br><span class="line">          title</span><br><span class="line">        &#125;</span><br><span class="line">        excerpt</span><br><span class="line">        html</span><br><span class="line">        timeToRead</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allMarkdownRemark&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;edges&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;7cbc5c7a-e49e-5c45-a47e-3dd49a55d64f&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;frontmatter&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2017-08-10&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Sweet Pandas Eating Sweets&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;excerpt&quot;</span>: <span class="string">&quot;Pandas are really sweet. Here&#x27;s a video of a panda eating sweets.&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;html&quot;</span>: <span class="string">&quot;&lt;p&gt;Pandas are really sweet.&lt;/p&gt;\n&lt;p&gt;Here&#x27;s a video of a panda eating sweets.&lt;/p&gt;\n&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=\&quot;https://www.youtube.com/embed/4n0xNbfJLR8\&quot; frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;timeToRead&quot;</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;extensions&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们利用动态数据来渲染首页 <code>src/pages/index.js</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span></span><br><span class="line">import &#123; graphql &#125; from <span class="string">&quot;gatsby&quot;</span></span><br><span class="line">import &#123; css &#125; from <span class="string">&quot;@emotion/react&quot;</span></span><br><span class="line">import &#123; rhythm &#125; from <span class="string">&quot;../utils/typography&quot;</span></span><br><span class="line">import Layout from <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line">export default function Home(&#123; data &#125;) &#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1</span><br><span class="line">          css=&#123;css`</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border-bottom: <span class="number">1</span>px solid;</span><br><span class="line">          `&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Amazing Pandas Eating Things</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;h4&gt;&#123;data.allMarkdownRemark.totalCount&#125; Posts&lt;/h4&gt;</span><br><span class="line">        &#123;data.allMarkdownRemark.edges.map((&#123; node &#125;) =&gt; (</span><br><span class="line">          &lt;div key=&#123;node.id&#125;&gt;</span><br><span class="line">            &lt;h3</span><br><span class="line">              css=&#123;css`</span><br><span class="line">                margin-bottom: $&#123;rhythm(1 / 4)&#125;;</span><br><span class="line">              `&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;node.frontmatter.title&#125;&#123;<span class="attr">&quot; &quot;</span>&#125;</span><br><span class="line">              &lt;span</span><br><span class="line">                css=&#123;css`</span><br><span class="line">                  color: #bbb;</span><br><span class="line">                `&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                — &#123;node.frontmatter.date&#125;</span><br><span class="line">              &lt;/span&gt;</span><br><span class="line">            &lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;&#123;node.excerpt&#125;&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Layout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const query = graphql`</span><br><span class="line">  query &#123;</span><br><span class="line">    allMarkdownRemark(sort: &#123; fields: [frontmatter___date], order: DESC &#125;) &#123;</span><br><span class="line">      totalCount</span><br><span class="line">      edges &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">          id</span><br><span class="line">          frontmatter &#123;</span><br><span class="line">            title</span><br><span class="line">            date(formatString: <span class="string">&quot;DD MMMM, YYYY&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          excerpt</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>现在的顺序是最新的在底下我们可以通过调整参数来改变文章排列顺序将<code>allMarkdownRemark</code> 改成<code>allMarkdownRemark(sort: &#123; fields: [frontmatter___date], order: DESC &#125;)</code></p><p>文章列表已经就绪，接下来显示文章详情，我们来自动创建页面以及其路径，通常如果使用了<code>CMS</code> 比如<code>notion</code>  , <code>Contentful</code> , <code>Netlify CMS</code> ,会自动提供页面路径或者 <code>slug</code> , 但如果我们使用markdown 文件来生成页面需要使用这两个 <code>API</code> ：<code>onCreateNode</code> 和 <code>createPages</code> ,我们需要在<code>gatsby-node.js</code>这个文件中使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createFilePath &#125; = <span class="built_in">require</span>(<span class="string">`gatsby-source-filesystem`</span>)</span><br><span class="line"><span class="built_in">exports</span>.onCreateNode = <span class="function">(<span class="params">&#123; node, getNode, actions &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">if (node.internal.type === `MarkdownRemark`) &#123;</span></span><br><span class="line"><span class="comment">    const fileNode = getNode(node.parent)</span></span><br><span class="line"><span class="comment">    console.log(`\n`, fileNode.relativePath)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if (node.internal.type === `MarkdownRemark`) &#123;</span></span><br><span class="line"><span class="comment">console.log(createFilePath(&#123; node, getNode, basePath: `pages` &#125;))</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; createNodeField &#125; = actions</span><br><span class="line">  <span class="keyword">if</span> (node.internal.type === <span class="string">`MarkdownRemark`</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> slug = createFilePath(&#123; node, getNode, <span class="attr">basePath</span>: <span class="string">`pages`</span> &#125;)</span><br><span class="line">    createNodeField(&#123;</span><br><span class="line">      node,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`slug`</span>,</span><br><span class="line">      <span class="attr">value</span>: slug,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有了一个新的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  allMarkdownRemark &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        fields &#123;</span><br><span class="line">          slug</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allMarkdownRemark&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;edges&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;/pandas-and-bananas/&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;/sweet-pandas-eating-sweets/&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;extensions&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以根据这个字段来找到对应的文章路径了。</p><p>仅仅是这样并不够，因为页面还不存在我们需要将页面生成出来，<code>src/pages/xxx.js</code> 下的文件会自动生成页面，但是其他的需要我们调用 <code>createPages</code>来生成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createFilePath &#125; = <span class="built_in">require</span>(<span class="string">`gatsby-source-filesystem`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.onCreateNode = <span class="function">(<span class="params">&#123; node, getNode, actions &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createNodeField &#125; = actions</span><br><span class="line">  <span class="keyword">if</span> (node.internal.type === <span class="string">`MarkdownRemark`</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> slug = createFilePath(&#123; node, getNode, <span class="attr">basePath</span>: <span class="string">`pages`</span> &#125;)</span><br><span class="line">    createNodeField(&#123;</span><br><span class="line">      node,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`slug`</span>,</span><br><span class="line">      <span class="attr">value</span>: slug,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段的是意思是先走接口将所有的数据拉过来</span></span><br><span class="line"><span class="comment">// 将所有的markdown的文件生成对应的页面</span></span><br><span class="line"><span class="built_in">exports</span>.createPages = <span class="keyword">async</span> (&#123; graphql, actions &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// **Note:** The graphql function call returns a Promise</span></span><br><span class="line">  <span class="comment">// see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise for more info</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> graphql(<span class="string">`</span></span><br><span class="line"><span class="string">    query &#123;</span></span><br><span class="line"><span class="string">      allMarkdownRemark &#123;</span></span><br><span class="line"><span class="string">        edges &#123;</span></span><br><span class="line"><span class="string">          node &#123;</span></span><br><span class="line"><span class="string">            fields &#123;</span></span><br><span class="line"><span class="string">              slug</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(result, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要生成页面还需要一个额外的操作，我们需要建立一个模版文件 <code>src/templates/blog-post.js</code> 根据这个文件模版以及数据来生成对应的页面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">BlogPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello blog post<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来继续更新 <code>gatsby-node.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">`path`</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; createFilePath &#125; = <span class="built_in">require</span>(<span class="string">`gatsby-source-filesystem`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.onCreateNode = <span class="function">(<span class="params">&#123; node, getNode, actions &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createNodeField &#125; = actions</span><br><span class="line">  <span class="keyword">if</span> (node.internal.type === <span class="string">`MarkdownRemark`</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> slug = createFilePath(&#123; node, getNode, <span class="attr">basePath</span>: <span class="string">`pages`</span> &#125;)</span><br><span class="line">    createNodeField(&#123;</span><br><span class="line">      node,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`slug`</span>,</span><br><span class="line">      <span class="attr">value</span>: slug,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.createPages = <span class="keyword">async</span> (&#123; graphql, actions &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createPage &#125; = actions</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> graphql(<span class="string">`</span></span><br><span class="line"><span class="string">    query &#123;</span></span><br><span class="line"><span class="string">      allMarkdownRemark &#123;</span></span><br><span class="line"><span class="string">        edges &#123;</span></span><br><span class="line"><span class="string">          node &#123;</span></span><br><span class="line"><span class="string">            fields &#123;</span></span><br><span class="line"><span class="string">              slug</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>)</span><br><span class="line"></span><br><span class="line">  result.data.allMarkdownRemark.edges.forEach(<span class="function">(<span class="params">&#123; node &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    createPage(&#123;</span><br><span class="line">      <span class="attr">path</span>: node.fields.slug,</span><br><span class="line">      <span class="attr">component</span>: path.resolve(<span class="string">`./src/templates/blog-post.js`</span>),</span><br><span class="line">      <span class="attr">context</span>: &#123;</span><br><span class="line">        <span class="comment">// Data passed to context is available</span></span><br><span class="line">        <span class="comment">// in page queries as GraphQL variables.</span></span><br><span class="line">        <span class="attr">slug</span>: node.fields.slug,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便访问一个不存在的链接 <a href="http://localhost:8000/sdf">http://localhost:8000/sdf</a> 即可看到能够访问的文章列表，点进去即可看到模版文件的内容，接下来我们更新模版数据让他显示该显示的数据即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/templates/blog-post.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&quot;gatsby&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;../components/layout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">BlogPost</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> post = data.markdownRemark</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;post.frontmatter.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">post.html</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query($slug: String!) &#123;</span></span><br><span class="line"><span class="string">    markdownRemark(fields: &#123; slug: &#123; eq: $slug &#125; &#125;) &#123;</span></span><br><span class="line"><span class="string">      html</span></span><br><span class="line"><span class="string">      frontmatter &#123;</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>最后一步更新首页中链接</p><p><a href="https://special-shape.surge.sh/">https://special-shape.surge.sh/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gatsby&quot;&gt;&lt;a href=&quot;#Gatsby&quot; class=&quot;headerlink&quot; title=&quot;Gatsby&quot;&gt;&lt;/a&gt;Gatsby&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;是React的开</summary>
      
    
    
    
    <category term="Gatsby" scheme="https://sdongzhi.com/categories/Gatsby/"/>
    
    
    <category term="blog" scheme="https://sdongzhi.com/tags/blog/"/>
    
    <category term="Gatsby" scheme="https://sdongzhi.com/tags/Gatsby/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用指南</title>
    <link href="https://sdongzhi.com/2020/10/12/vscode-quick/"/>
    <id>https://sdongzhi.com/2020/10/12/vscode-quick/</id>
    <published>2020-10-12T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高频操作"><a href="#高频操作" class="headerlink" title="高频操作"></a>高频操作</h3><h4 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h4><ul><li><code>Command + Shift + P 输入 打开键盘快捷方式</code> 或者 <code>Command k + Command r</code> 打开快捷键 pdf 链接</li></ul><h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><ul><li><code>Opts + 左右箭头</code> 光标在单词间跳转</li><li><code>Command + 左右箭头</code> 光标在行首行末之际跳转</li><li><code>Command + 上下箭头</code> 光标在文件开始和末尾之际跳转</li><li><code>Command + Shift + \</code> 光标在文件开始和末尾之际跳转</li></ul><h4 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h4><p>你单击鼠标左键就可以把光标移动到相应的位置。而双击鼠标左键，则会将当前光标下的单词选中。连续三次按下鼠标左键，则会选中当前这一行代码。最后是连续四次按下鼠标左键，则会选中整个文档</p><ul><li><code>Opts + Shift + 左右箭头</code> 选中单词</li><li><code>Command + Shift + P 输入选择括号所有内容</code> 将光标所在打括号的内容选中</li><li><code>在编辑器的最左边拖动行号的位置选中拖动可以选中多行</code></li></ul><h4 id="代码行编辑"><a href="#代码行编辑" class="headerlink" title="代码行编辑"></a>代码行编辑</h4><ul><li><code>Command + Shift + K</code> 删除一行代码或多行</li><li><code>Command + X</code> 剪切代码</li><li><code>Command + Enter</code> 无论在一行的什么位置会在下面新建一行不会将一行分成两端</li><li><code>Command + Shift + Enter</code> 无论在一行的什么位置会在上面新建一行不会将一行分成两端</li><li><code>Option + up/down</code> 移动行</li><li><code>Option + Shift + up/down</code> 复制所在行到上面或者下面</li></ul><h4 id="合并代码行"><a href="#合并代码行" class="headerlink" title="合并代码行"></a>合并代码行</h4><ul><li><code>Ctrl + j</code> 将选中的代码行合并</li></ul><h4 id="调整字符大小写"><a href="#调整字符大小写" class="headerlink" title="调整字符大小写"></a>调整字符大小写</h4><ul><li><code>你可以选中一串字符，然后在命令面板里运行“转换为大写”或 “转换为小写”, 来变换字符的大小写。</code></li></ul><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><ul><li><code>Option + Shift + F</code> 对整个文档进行格式化</li><li><code>Command + K Command + F</code> 对选中代码进行格式化</li></ul><h4 id="添加代码注释"><a href="#添加代码注释" class="headerlink" title="添加代码注释"></a>添加代码注释</h4><ul><li><code>Option + Shift + A</code> 对选中内容进行注释</li><li><code>Command + /</code> 对选中内容进行注释</li></ul><h4 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h4><ul><li><code>Ctrl + 空格</code> 调出建议列表或者 tab 键调出</li><li><code>Command + Shift + 空格</code> 调出建议参数预览</li></ul><h4 id="快速修复"><a href="#快速修复" class="headerlink" title="快速修复"></a>快速修复</h4><ul><li><code>Command + .</code> 对于拼错的 css 或者 js 进行修复</li></ul><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><ul><li><p><code>F2</code> 修改一个函数或者变量的名字时候，我们只需把光标放到函数或者变量名上，然后按下 F2，这样这个函数或者变量出现的地方就都会被修改。</p></li><li><p>另一个常用的重构的操作就是把一段长代码抽取出来转成一个单独的函数。在 VS Code 中，我们只需选中那段代码，点击黄色的灯泡图标，然后选择对应的重构操作即可。</p></li></ul><h4 id="多行操作多光标"><a href="#多行操作多光标" class="headerlink" title="多行操作多光标"></a>多行操作多光标</h4><ul><li><p><code>Option + 鼠标点击</code> 对于点中的地方会有一个光标，对于点击到的位置可以操作</p></li><li><p><code>Command + Option + up/down</code> 可以移动时可以产生光标，可以再通过 <code>Command + 左右方向键</code> 可以移动到每一行末尾</p></li><li><p><code>Command + D</code> ，第一次按下时，它会选中光标附近的单词；第二次按下时，它会找到这个单词第二次出现的位置，创建一个新的光标，并且选中它。这样只需要按下三次，你就选中了所有的“5”。这个时候你再按下 “右方向键”，输入“px”，即可完成任务。</p></li><li><p><code>Option + Shift + i</code> 首先你选择多行代码，然后按下 “Option + Shift + i” （Windows 上是 Alt + Shift + i），这样操作的结果是：每一行的最后都会创建一个新的光标。</p></li><li><p>VS Code 中还有一个更加便捷的鼠标创建多光标的方式。当然，这首先要求你的鼠标拥有中键。你只需按下鼠标中键，然后对着一段文档拖出一个框，在这个框中的代码就都被选中了，而且每一行被选中的代码，都拥有一个独立的光标。</p></li></ul><h4 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h4><ul><li><code>Command + Option + [</code> 光标所在位置代码片段折叠一层</li><li><code>Command + Option + ]</code> 光标所在位置代码片段展开一层</li><li><code>Command + K Command + [</code> 将一直到最外层所有折叠</li><li><code>Command + K Command + ]</code> 将一直到最外层所有展开</li><li><code>Command + K Command + 0</code> 代码全部合并</li><li><code>Command + K Command + j</code> 代码全部展开</li></ul><h4 id="单文件搜索"><a href="#单文件搜索" class="headerlink" title="单文件搜索"></a>单文件搜索</h4><ul><li><code>Command + F</code> 在文件内搜索</li><li><code>Enter 或者 Shift + Enter</code> 在搜索内容中跳转</li><li><code>Command + G</code> 首先我们将光标移动到我们想要搜索的单词处，然后不断按下快捷键就可以从上往下查找搜索内容并移动光标</li><li><code>Command + Shift + G</code> 从下往上查找搜索内容并移动光标</li><li><code>Command + Option + F</code> 在文件内替换</li></ul><h4 id="多文件搜索"><a href="#多文件搜索" class="headerlink" title="多文件搜索"></a>多文件搜索</h4><ul><li><code>Command + Shift + F</code> 在文件夹内搜索跟替换</li></ul><h4 id="行跳转"><a href="#行跳转" class="headerlink" title="行跳转"></a>行跳转</h4><ul><li><code>Ctrl + G</code> 输入 10:3 跳到第 10 行第三列</li></ul><h4 id="符号跳转"><a href="#符号跳转" class="headerlink" title="符号跳转"></a>符号跳转</h4><ul><li><code>Command + Shift + O</code> 可以看到当前文件的所有符号，如方法名</li></ul><h4 id="文件跳转"><a href="#文件跳转" class="headerlink" title="文件跳转"></a>文件跳转</h4><ul><li><code>Ctrl + tab</code> 罗列现在已经打开到文件列表</li><li><code>Command + P</code> 跳出一个最近打开文件的列表，同时在列表的顶部还有一个搜索框</li><li><code>Cmd + Enter</code> （Windows 上是 Ctrl + Enter）组合键。这个文件在一个新的编辑器窗口中打开了。</li></ul><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><h4 id="命令行的使用"><a href="#命令行的使用" class="headerlink" title="命令行的使用"></a>命令行的使用</h4><p>我们可以通过命令行直接启动<code>VSCode</code>，windows 用户可以通过添加安装目录到系统环境变量 PATH 中,如果是 mac 用户</p><ul><li><code>Command + Shift + P</code></li><li><code>搜索框中输入 Shell 命令：在 PATH 中安装 “Code” 命令</code></li><li><code>重启VSCode</code></li></ul><p>然后就可以在终端中通过 code 命令直接打开<code>VSCode</code>了，<br>常用的命令行使用命令</p><ul><li><code>code -r .</code> 打开当前目录 -r 代表窗口复用</li><li><code>code -r -g package.json:10:15</code> 打开当前目录 -g 跳转到某个文件</li><li><code>code -r -d a.txt b.txt</code> 打开当前目录 -d 比较两个文件差异</li></ul><p>还有一个比较好的就是接受管道数据</p><ul><li><code>ls | code -</code> 改命令可以将目录下的所有文件名展示到<code>VSCode</code>中</li></ul><h4 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h4><p>首先我们可能需要为<code>VSCode</code>设置语言，这个并不是必要操作但是可以为英语不好的同学提供一个过渡选择</p><ul><li><code>Command + Shift + P</code> or <code>F1</code></li><li><code>搜索框中输入 configure display language 然后安装其他语言选择简体中文</code></li><li><code>重启VSCode</code></li></ul><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><ul><li><code>Command + Backspace</code> 删除该行左边</li><li><code>Command + Delete</code> 删除该行右边</li></ul><h4 id="撤销光标移动"><a href="#撤销光标移动" class="headerlink" title="撤销光标移动"></a>撤销光标移动</h4><ul><li><code>Command + u</code> 移动光标到上次的位置</li></ul><h4 id="行排序"><a href="#行排序" class="headerlink" title="行排序"></a>行排序</h4><p>你都可以把代码行按照字母序进行重新排序。不过这个命令比较小众，VS Code 并没有给这个命令指定快捷键，你可以调出命令面板，然后搜索 “按升序排列行” 或者 “按降序排列行” 命令执行。</p><h4 id="调整字符的位置"><a href="#调整字符的位置" class="headerlink" title="调整字符的位置"></a>调整字符的位置</h4><ul><li><code>Ctrl + t</code> 交互字符位置</li></ul><h4 id="定义与实现之间的跳转"><a href="#定义与实现之间的跳转" class="headerlink" title="定义与实现之间的跳转"></a>定义与实现之间的跳转</h4><ul><li><code>F12 or Command + F12</code> 按下 F12，就可以跳转到函数的定义处。</li></ul><h4 id="跳到引用的地方"><a href="#跳到引用的地方" class="headerlink" title="跳到引用的地方"></a>跳到引用的地方</h4><ul><li><code>Shift + F12</code> 打开函数引用预览</li></ul><h4 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h4><ul><li><code>Command + Shift + P</code>： 配置用户代码片段 configure user snippets</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;console.log($&#123;1:i&#125;);&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$2&quot;</span></span><br><span class="line">    ],</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><ul><li>首先打开一个文件夹 然后 打开命令面板 F1 或者 <code>Command + Shift + P</code> 输入 将文件夹添加到工作去（add folder to workspace）</li><li>再一次打开命令面板 输入 “将工作区另存为” （save workspace as） 这样下次可以一次打开一个工作区</li><li><code>Ctrl + W</code> 可以切换工作区</li><li><code>Ctrl + R</code> 显示最近打开的文件夹列表</li><li><code>Ctrl + R </code> 选中后 <code>Command + Enter</code> 可以在新窗口打开</li></ul><h4 id="显示终端"><a href="#显示终端" class="headerlink" title="显示终端"></a>显示终端</h4><ul><li>Ctrl + ` 可以打开或者隐藏终端</li><li>新建一个文件在其中输入内容<code>ls -al</code> 打开命令面板在其中输入 “在活动终端中运行活动文件” 这个脚本会在继承终端中运行</li></ul><h4 id="拆分编辑器"><a href="#拆分编辑器" class="headerlink" title="拆分编辑器"></a>拆分编辑器</h4><ul><li><p><code>命令面板中搜索 拆分编辑器</code> 可以将编辑器拆分多个</p></li><li><p><code>Cmd + 1、Cmd + 2 和 Cmd + 3</code> 在三个编辑器中跳转</p></li><li><p><code>Cmd + Option + 0</code> 可以在纵向拆分跟横向拆分之间切换</p></li><li><p><code>Cmd + Option + up/down</code> 可以在窗口之间切换</p></li><li><p><code>命令面板中搜索 2 x 2 网格编辑器布局</code> 可以将编辑器拆分 2 x 2</p></li><li><p><code>Cmd + B</code> 打开或者关闭整个视图；</p></li><li><p><code>Cmd + J</code> 来打开或者关闭面板； 跟 Ctrl + ` 作用一样</p></li></ul><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><ul><li><code>Cmd + +/-</code> 缩放整个工作区；</li></ul><h4 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h4><ul><li><code>命令面板中搜索 打开侧边预览</code> 可以一边编辑 markdown 文档一边预览</li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-mac-introduce.html">IntelliJ IDEA For Mac 快捷键</a></li></ul><h4 id="IntelliJ-IDEA-For-Mac-快捷键"><a href="#IntelliJ-IDEA-For-Mac-快捷键" class="headerlink" title="IntelliJ IDEA For Mac 快捷键"></a>IntelliJ IDEA For Mac 快捷键</h4><ul><li>根据官方 pdf 翻译：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf</a></li><li>在 IntelliJ IDEA 中有两个 Mac 版本的快捷键，一个叫做：Mac OS X，一个叫做：Mac OS X 10.5+</li><li>目前都是用：Mac OS X 10.5+</li><li>有两套的原因：<a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed">https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed</a><blockquote><p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;高频操作&quot;&gt;&lt;a href=&quot;#高频操作&quot; class=&quot;headerlink&quot; title=&quot;高频操作&quot;&gt;&lt;/a&gt;高频操作&lt;/h3&gt;&lt;h4 id=&quot;自定义快捷键&quot;&gt;&lt;a href=&quot;#自定义快捷键&quot; class=&quot;headerlink&quot; title=&quot;自定义快捷</summary>
      
    
    
    
    <category term="生产工具" scheme="https://sdongzhi.com/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="生产工具" scheme="https://sdongzhi.com/tags/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    <category term="IDE" scheme="https://sdongzhi.com/tags/IDE/"/>
    
    <category term="VSCode" scheme="https://sdongzhi.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发填坑</title>
    <link href="https://sdongzhi.com/2020/05/21/miniprogram-pit/"/>
    <id>https://sdongzhi.com/2020/05/21/miniprogram-pit/</id>
    <published>2020-05-21T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近连续开发了几个小程序，总是有一些需要重复解决的问题，因此在此记录一下</p><h3 id="自定义头部组件"><a href="#自定义头部组件" class="headerlink" title="自定义头部组件"></a>自定义头部组件</h3><p>我们开发小程序的时候通常是用的统一的头部，一般是白底黑字或者简单定义一下背景色和文字颜色，比如这样<br>在 <code>page/example.json</code> 中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;,</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#557dde&quot;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;二维码收款&quot;,</span><br><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#557dde&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时在<code>page/example.wxss</code> 中定义背景色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">  background-color: #557dde;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="https://cdn.darknights.cn/assets/images/in-post/miniprogram/code.png" loading="lazy"></p><p>同时定义了顶部状态栏的颜色和背景栏的颜色，通常也能够满足需求了。</p><p>但是仅仅这样是不够的比如我想像这样<br><img src="https://cdn.darknights.cn/assets/images/in-post/miniprogram/example1.png" loading="lazy"><br>头部图片可以做滑动效果而且展开到整个头部。这时候就需要自定义组件出马了,比如在首页 index.json 中要引入自定义组建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: false,</span><br><span class="line">  &quot;onReachBottomDistance&quot;: 50,</span><br><span class="line">  &quot;navigationStyle&quot;: &quot;custom&quot;,</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;nav-bar&quot;: &quot;/component/navbar/navbar&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中最关键的点就是要计算状态栏的各种高度，首先头部导航包括两部分工具栏和 title 栏<br><img src="https://cdn.darknights.cn/assets/images/in-post/miniprogram/navigator.png" loading="lazy"><br>其中上部分是工具栏通过小程序提供的<code>wx.getSystemInfoSync()</code>方法能够拿到系统的一些信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  SDKVersion: &quot;2.11.3&quot;,</span><br><span class="line">  batteryLevel: 100,</span><br><span class="line">  benchmarkLevel: 1,</span><br><span class="line">  brand: &quot;devtools&quot;,</span><br><span class="line">  deviceOrientation: &quot;portrait&quot;,</span><br><span class="line">  devicePixelRatio: 2,</span><br><span class="line">  fontSizeSetting: 16,</span><br><span class="line">  language: &quot;zh_CN&quot;,</span><br><span class="line">  model: &quot;iPhone 6/7/8&quot;,</span><br><span class="line">  pixelRatio: 2,</span><br><span class="line">  platform: &quot;devtools&quot;,</span><br><span class="line">  safeArea: &#123;</span><br><span class="line">    bottom: 667,</span><br><span class="line">    height: 647,</span><br><span class="line">    left: 0,</span><br><span class="line">    right: 375,</span><br><span class="line">    top: 20,</span><br><span class="line">    width: 375</span><br><span class="line">  &#125;,</span><br><span class="line">  screenHeight: 667,</span><br><span class="line">  screenWidth: 375,</span><br><span class="line">  statusBarHeight: 20,</span><br><span class="line">  system: &quot;iOS 10.0.1&quot;,</span><br><span class="line">  version: &quot;7.0.4&quot;,</span><br><span class="line">  windowHeight: 603,</span><br><span class="line">  windowWidth: 375,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般情况下 <code>screenHeight - windowHeight</code> 所得到的就是顶部工具栏+title 栏的高度， 但是在自定义了头部组件后即设置了<code>"navigationStyle": "custom"</code>，这两个值是相等的,还有一个比较重要的字段 statusBarHeight 通常这个就是代表工具栏的高度而且这个值是值得信赖的。 有个点需要注意就是单位一定要设置为<code>px</code>。</p><blockquote><p>注：由于胶囊按钮是原生组件，为表现一致，其单位在各种手机中都为 px，所以我们自定义导航栏的单位都必需是 px（切记不能用 rpx），才能完美适配。</p></blockquote><p>解决了工具栏部分，主要需要搞定的就是 title 栏的高度了，主要是为了适配胶囊的位置。<br><a href="https://developers.weixin.qq.com/miniprogram/design/#%E5%9B%BE%E6%A0%87">官方文档</a>，有一张图片<br><img src="https://cdn.darknights.cn/assets/images/in-post/miniprogram/bar.png" loading="lazy"><br>这里安卓跟 ios 的表现是不一样的,胶囊距离工具栏的高度是不一样的，差了 6 个 pt，更闹心的是开发工具跟真机的表现也是不一样的， 不过好在一点就是胶囊的宽和高是一样的都是<code>87</code>*<code>32</code>，我们所做的一切努力都是想让胶囊的上下间距跟跟不自定义组件的显示效果是一样的</p><blockquote><p>真机和开发者工具模拟器上的胶囊按钮不一样</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># iOS</span><br><span class="line">top 4px</span><br><span class="line">right 7px</span><br><span class="line">width 87px</span><br><span class="line">height 32px</span><br><span class="line"></span><br><span class="line"># Android</span><br><span class="line">top 8px</span><br><span class="line">right 10px</span><br><span class="line">width 95px</span><br><span class="line">height 32px</span><br><span class="line"></span><br><span class="line"># 开发者工具模拟器（iOS）</span><br><span class="line">top 6px</span><br><span class="line">right 10px</span><br><span class="line">width 87px</span><br><span class="line">height 32px</span><br><span class="line"></span><br><span class="line"># 开发者工具模拟器（Android）</span><br><span class="line">top 8px</span><br><span class="line">right 10px</span><br><span class="line">width 87px</span><br><span class="line">height 32px</span><br><span class="line"></span><br><span class="line">可以看出，iOS胶囊按钮与状态栏之间距离为：4px， Android为8px，是不是所有手机都是这种情况呢？</span><br><span class="line">答案是:苹果手机确实都是4px,安卓大部分都是7和8 也会有其他的情况</span><br><span class="line">(可以自己打印getSystemInfo验证)如何快速便捷算出这个高度,请接着往下看</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="粗暴计算方法一"><a href="#粗暴计算方法一" class="headerlink" title="粗暴计算方法一"></a>粗暴计算方法一</h4><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013">自定义导航栏所有机型的适配方案</a>,简单粗暴根据上面规律来计算胶囊的位置</p><p><a href="https://developers.weixin.qq.com/s/Q79g6kmo7w5J">代码片段</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 获取胶囊按钮位置</span><br><span class="line">   */</span><br><span class="line">  getMenuPosition () &#123;</span><br><span class="line">    let top = 4</span><br><span class="line">    let right = 7</span><br><span class="line">    let width = 87</span><br><span class="line">    let height = 32</span><br><span class="line">    if (systemInfo.platform === &#x27;devtools&#x27; &amp;&amp; systemInfo.system.indexOf(&#x27;Android&#x27;) === -1) &#123;</span><br><span class="line">      top = 6</span><br><span class="line">      right = 10</span><br><span class="line">    &#125;</span><br><span class="line">    else if (systemInfo.platform === &#x27;devtools&#x27; &amp;&amp; systemInfo.system.indexOf(&#x27;Android&#x27;) != -1) &#123;</span><br><span class="line">      top = 8</span><br><span class="line">      right = 10</span><br><span class="line">    &#125;</span><br><span class="line">    else if (systemInfo.system.indexOf(&#x27;Android&#x27;) != -1) &#123;</span><br><span class="line">      top = 8</span><br><span class="line">      right = 10</span><br><span class="line">      width = 95</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      top: systemInfo.statusBarHeight + top,</span><br><span class="line">      left: systemInfo.windowWidth - width - right,</span><br><span class="line">      width: width,</span><br><span class="line">      height: height</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   * 获取工具栏样式</span><br><span class="line">   */</span><br><span class="line">  getStatusBarStyle () &#123;</span><br><span class="line">    let statusBarPosition = &#123;</span><br><span class="line">      top: 0,</span><br><span class="line">      left: 0,</span><br><span class="line">      width: systemInfo.windowWidth,</span><br><span class="line">      height: systemInfo.statusBarHeight</span><br><span class="line">    &#125;</span><br><span class="line">    return this.formatStyle(statusBarPosition)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">   * 获取导航栏样式</span><br><span class="line">   */</span><br><span class="line">  getNavigationBarStyle () &#123;</span><br><span class="line">    let menuPosition = this.getMenuPosition()</span><br><span class="line">    let navigationBarPosition = &#123;</span><br><span class="line">      top: systemInfo.statusBarHeight,</span><br><span class="line">      left: 0,</span><br><span class="line">      width: systemInfo.windowWidth,</span><br><span class="line">      height: (menuPosition.top - systemInfo.statusBarHeight) * 2 + menuPosition.height</span><br><span class="line">    &#125;</span><br><span class="line">    return this.formatStyle(navigationBarPosition)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 获取导航样式</span><br><span class="line">   */</span><br><span class="line">  getNavigationStyle () &#123;</span><br><span class="line">    let menuPosition = this.getMenuPosition()</span><br><span class="line">    let padding = systemInfo.windowWidth - menuPosition.left - menuPosition.width</span><br><span class="line">    let navigationPosition = &#123;</span><br><span class="line">      top: menuPosition.top,</span><br><span class="line">      left: padding,</span><br><span class="line">      width: systemInfo.windowWidth - padding * 3 - menuPosition.width,</span><br><span class="line">      height: menuPosition.height</span><br><span class="line">    &#125;</span><br><span class="line">    return this.formatStyle(navigationPosition)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 获取胶囊按钮样式</span><br><span class="line">   */</span><br><span class="line">  getMenuStyle() &#123;</span><br><span class="line">    return this.formatStyle(this.getMenuPosition())</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 格式化Style</span><br><span class="line">   */</span><br><span class="line">  formatStyle (position) &#123;</span><br><span class="line">    let styles = []</span><br><span class="line">    for (let key in position) &#123;</span><br><span class="line">      styles.push(`$&#123;key&#125;: $&#123;position[key]&#125;px;`)</span><br><span class="line">    &#125;</span><br><span class="line">    return styles.join(&#x27; &#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wxml 文件如下</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- status-bar --&gt;</span><br><span class="line">  &lt;view class=&quot;status-bar&quot; style=&quot;&#123;&#123; statusBarStyle &#125;&#125;&quot;/&gt;</span><br><span class="line">  &lt;!-- navigation-bar --&gt;</span><br><span class="line">  &lt;view class=&quot;navigation-bar&quot; style=&quot;&#123;&#123; navigationBarStyle &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;!-- title --&gt;</span><br><span class="line">    &lt;view class=&quot;navigation&quot; style=&quot;&#123;&#123; navigationStyle &#125;&#125;&quot;&gt;</span><br><span class="line">      这是最佳可操作区域</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;!-- menu --&gt;</span><br><span class="line">  &lt;view class=&quot;menu&quot; style=&quot;&#123;&#123; menuStyle &#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结一下这种计算只是区分了最常规的几种显示方案，包括开发工具的安卓，开发工具的 IOS， 真机的安卓，真机的 IOS,只是囊括了最通用的显示方案，但是如果真机范围足够广的话应该会有问题，需要对出现问题的机型逐一兼容。</p><h4 id="拼多多-官方不稳的方案二"><a href="#拼多多-官方不稳的方案二" class="headerlink" title="拼多多+官方不稳的方案二"></a>拼多多+官方不稳的方案二</h4><p>其实官方提供了一个方法来获取胶囊的位置<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html">wx.getMenuButtonBoundingClientRect</a><br>,但是这个方法可能获取不到或者根本不准确<br>问题列表如下：<br><img src="https://cdn.darknights.cn/assets/images/in-post/miniprogram/error.png" loading="lazy"><br>到目前为止还是没有完美解决这个问题，所以该方法还是要慎重使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  const systemInfo = wx.getSystemInfoSync();</span><br><span class="line">  rect = wx.getMenuButtonBoundingClientRect ? wx.getMenuButtonBoundingClientRect() : null;</span><br><span class="line">  if (rect === null) &#123;</span><br><span class="line">    throw &#x27;getMenuButtonBoundingClientRect error&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  //取值为0的情况</span><br><span class="line">  if (!rect.width) &#123;</span><br><span class="line">    throw &#x27;getMenuButtonBoundingClientRect error&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  let gap = &#x27;&#x27;; //胶囊按钮上下间距 使导航内容居中</span><br><span class="line">  let width = 96; //胶囊的宽度，android大部分96或者95，ios为88或者87</span><br><span class="line">  if (systemInfo.platform === &#x27;android&#x27;) &#123;</span><br><span class="line">    gap = 8;</span><br><span class="line">    width = 96;</span><br><span class="line">  &#125; else if (systemInfo.platform === &#x27;devtools&#x27;) &#123;</span><br><span class="line">    if (ios) &#123;</span><br><span class="line">      gap = 6; //开发工具中ios手机 5.5</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      gap = 8; //开发工具中android和其他手机 7.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    gap = 4;</span><br><span class="line">    width = 88;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!systemInfo.statusBarHeight) &#123;</span><br><span class="line">    //开启wifi的情况下修复statusBarHeight值获取不到</span><br><span class="line">    systemInfo.statusBarHeight = systemInfo.screenHeight - systemInfo.windowHeight - 20;</span><br><span class="line">  &#125;</span><br><span class="line">  rect = &#123;</span><br><span class="line">    //获取不到胶囊信息就自定义重置一个</span><br><span class="line">    bottom: systemInfo.statusBarHeight + gap + 32,</span><br><span class="line">    height: 32,</span><br><span class="line">    left: systemInfo.windowWidth - width - 10,</span><br><span class="line">    right: systemInfo.windowWidth - 10,</span><br><span class="line">    top: systemInfo.statusBarHeight + gap,</span><br><span class="line">    width: width</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(&#x27;error&#x27;, error);</span><br><span class="line">  console.log(&#x27;rect&#x27;, rect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过兼容官方的<code>wx.getMenuButtonBoundingClientRect</code>方法，再加上方法一中的设定默认值的方案基本就能满足所有场景了。</p><h3 id="swiper-高度问题"><a href="#swiper-高度问题" class="headerlink" title="swiper 高度问题"></a>swiper 高度问题</h3><p>我们开发时还有这样一个问题比如我们需要使用<code>swiper</code>组件，但是问题就是， swiper 中的内容高度是 100%的，这样如果在 swiper 中同时有上滑加载更多<br>就会有内容显示不全的问题，为了解决这个问题我用的方法一是动态调整 swiper 内容的高度，代码如下</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;swiper  style=&quot;width:100%; height: &#123;\&#123;swiperHeight px;&#125;\&#125;&quot; &gt;</span><br><span class="line">    &lt;block wx:for=&quot;&#123;&#123;types&#125;&#125;&quot; wx:key=&quot;*this&quot; wx:for-item=&quot;currentType&quot;&gt;</span><br><span class="line">      &lt;swiper-item&gt;</span><br><span class="line">        &lt;view id=&quot;start_view&quot; class=&quot;start-view&quot; wx:if=&quot;&#123;&#123;couponType ===  currentType&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">        &lt;view class=&quot;tips-con&quot; wx:if=&quot;&#123;&#123;!emptyLoading &amp;&amp; !hasPosition &amp;&amp;  couponType === &#x27;nearby&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">          &lt;view class=&quot;tips-item&quot;&gt;若小程序定位已开启&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;tips-item&quot;&gt;请进入系统“设置”-“隐私”-“定位服务”中打开开关&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;tips-item&quot;&gt;允许使用定位系统&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;btn open-setting-btn&quot; bindtap=&quot;openSetting&quot; wx:if=&quot;&#123;&#123;!hasPosition &amp;&amp;  couponType === &#x27;nearby&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">            开启定位</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view id=&quot;end_view&quot; class=&quot;start-view&quot; wx:if=&quot;&#123;&#123;couponType ===currentType &#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/block&gt;</span><br><span class="line">  &lt;/swiper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>swiperHeight</code>是动态参数， 我们在请求拿到数据后，通过 <code>setData(&#123; list,&#125;) </code>之后，获取 <code>start_view</code> 和 <code>end_view</code> 之间内容的高度来重新计算高度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">autoHeight() &#123;</span><br><span class="line">    wx.createSelectorQuery()</span><br><span class="line"></span><br><span class="line">      .select(&quot;#end_view&quot;)</span><br><span class="line">      .boundingClientRect()</span><br><span class="line"></span><br><span class="line">      .select(&quot;#start_view&quot;)</span><br><span class="line">      .boundingClientRect()</span><br><span class="line">      .exec((rect) =&gt; &#123;</span><br><span class="line">        let _space = rect[0].top - rect[1].top;</span><br><span class="line"></span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          swiperHeight: _space,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>方法一我们只是用了<code>swiper</code>组件，另一种实现方式是同时使用 <code>swiper</code> 和 <code>scroll</code>，<br>计算可视内容高度然后将 scroll 设置成固定高度，向上拖动自动追加新内容，只需要计算一次</p><h3 id="统一请求拦截"><a href="#统一请求拦截" class="headerlink" title="统一请求拦截"></a>统一请求拦截</h3><p>小程序发送请求我们会使用<code>wx.request</code>，如果需要设置统一的<code>Content-Type</code>或者在<code>headers</code>带上<code>token</code>， 就需要将请求封装</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">官方文档</a></li><li><a href="https://juejin.im/post/5d2748486fb9a07ed2249914">小程序之自定义头部导航栏</a></li><li><a href="https://juejin.im/post/5d557e2e5188255af1619716">微信小程序自定义导航栏组件(完美适配所有手机),可自定义实现任何你想要的功能</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013">自定义导航栏所有机型的适配方案</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/00048e5ed784b037b959757385b413">小程序顶部自定义导航组件实现原理及坑分享</a></li><li><a href="https://juejin.im/post/5ca0c4fc51882567ba6a6422#heading-3">小程序自定义导航栏适配（完美版）</a></li><li><a href="https://juejin.im/post/5b496d5d5188251a90187635#heading-8">【微信小程序】性能优化</a></li><li><a href="https://juejin.im/post/5e56762fe51d45271a03a2e6">小程序订阅消息用户拒绝/关闭后，如何引导用户再次开启？并获得用户的操作状态？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近连续开发了几个小程序，总是有一些需要重复解决的问题，因此在此记录一下&lt;/p&gt;
&lt;h3 id=&quot;自定义头部组件&quot;&gt;&lt;a href=&quot;#自定义头部组件&quot; class=&quot;headerlink&quot; title=&quot;自定义头部组件&quot;&gt;&lt;/a&gt;自定义头部组件&lt;/h3&gt;&lt;p&gt;我们开发小程</summary>
      
    
    
    
    <category term="小程序" scheme="https://sdongzhi.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="小程序" scheme="https://sdongzhi.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Babel最简单配置</title>
    <link href="https://sdongzhi.com/2020/04/24/babel-config/"/>
    <id>https://sdongzhi.com/2020/04/24/babel-config/</id>
    <published>2020-04-24T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<p>本文需要重新整理</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>关于 Babel 相信大家都不陌生，自从 ES2015 提供了一些新的语法让众多前端爱好者们爱不释手，但是现在的浏览器对于大部分的语法并不支持，那么如何才能在自己的项目中用上自己喜欢的语法呢？这里少不了这个工具<a href="https://babeljs.io/"><code>Babel</code></a>。</p><p>它是一个转换器，作用就是将新的语法转换成能被大部分浏览器识别的代码。换言之，只要安装了 Babel 你就可以在你的项目中随心所欲的使用最新的语法。下面我们来看一下它的配置(主要针对 babel@7)<br>配置文件一般为<code>.babelrc</code>或者 <code>babel.config.js</code></p><p>首先安装<code>@babel/core</code>，这是 babel 的核心。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @babel/core</span></span><br></pre></td></tr></table></figure><p>然后安装 <code>@@babel/cli</code>以便能够在命令行使用 babel</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @babel/cli</span><br></pre></td></tr></table></figure><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>如果需要转换剪头函数我们需要在<code>.babelrc</code>中，配置 Plugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;@babel/plugin-transform-arrow-functions&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 转换前 */</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换后 */</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>如果再想添加结构赋值的语法怎么办呢再加插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/plugin-transform-arrow-functions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/plugin-transform-destructuring&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可能将所有新的语法都加到插件里所以<code>Babel</code>向我们提供了<code>presets</code>,它是一个插件的合集这样我们就不需要一个个的引入了。官方提供了很多 presets，比如 preset-env（处理 es6+规范语法的插件集合）、preset-stage（处理尚处在提案语法的插件集合）、preset-react（处理 react 语法的插件集合）等，这里我们主要介绍下 preset-env：</p><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @babel/preset-env</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="preset-env"><a href="#preset-env" class="headerlink" title="preset-env"></a>preset-env</h3><p>preset-env 可以让你使用 es6 的语法去写代码，并且只转换需要转换的代码。默认情况下 preset-env 什么都不需要配置，此时他转换所有 es6+的代码，然而我们可以提供一个 targets 配置项指定运行环境，以下配置会将 es6 的代码转换成 IE8 以上浏览器支持的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: <span class="string">&quot;ie &gt;= 8&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="@babel/polyfill"></a>@babel/polyfill</h3><p><code>Babel</code>只会去转换语法，但是新的 Api(Promise,Proxy,WeekSet, WeekMap) 并不能转换，需要通过 @babel/polyfill 来 plofill,因此我们需要安装<code>@babel/polyfill</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @babel/polyfill --save-dev</span><br></pre></td></tr></table></figure><p>美中不足的是这个包很大我们可能并不需要加载全部，我们希望能够按需加载 <code>preset-env</code>可以通过配置<code>useBuiltIns</code>来解决这个问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: <span class="string">&quot;ie &gt;= 8&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useBuiltIns</code>得值可以是<code>entry</code>或者<code>useage</code>， <code>entry</code>会在入口处将所有 IE8 以上浏览器不支持 api 的 polyfile 引入进来，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* test.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@babel/polyfill&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* test-compiled.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/es6.array.copy-within&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/es6.array.every&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/es6.array.fill&quot;</span>;</span><br><span class="line">...   <span class="comment">//省略若干引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/web.immediate&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/web.dom.iterable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;regenerator-runtime/runtime&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这样通常就满足需要了，另一个配置<code>useage</code>更强大可以扫描代码只将所用到的 API 引入进来这样更加智能，只不过该功能还处于试验阶段。</p><h3 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="@babel/runtime"></a>@babel/runtime</h3><p>当我们进行编写一些复杂的语法时比如<code>class</code>，会有一些重复的<code>helper</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* test.js */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* test-compiled.js */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Test = <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  _classCallCheck(<span class="built_in">this</span>, Test);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果每个文件都要重复定义<code>_classCallCheck</code>会有重复代码，这时候可以使用<code>@babel/runtime</code>,它里面有各种各样的辅助函数。但是引入时如果全部引入又是一种浪费， 这时又需要<code>@babel/plugin-transform-runtime</code>这个插件了，他会帮我们自动引入 helper 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/runtime @babel/plugin-transform-runtime</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@babel/plugin-transform-runtime</code>还提供了一个 corejs 的配置，作用是将 polyfill 代码中使用的变量隔离到局部作用域中，防止在 polyfill 的时候污染全局变量。</p><p>安装插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/runtime-corejs2 --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: <span class="string">&quot;ie &gt;= 8&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;corejs&quot;</span>: <span class="number">2</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里一定要配置 corejs，同时安装@babel/runtime-corejs2，不配置的情况下@babel/plugin-transform-runtime 默认是不引入这些 polyfill 的 helper 的。corejs 的值现阶段一般指定为 2，可以近似理解为是@babel/runtime 的版本</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>到目前为止配置文件已经够用了配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;entry&quot;</span>, <span class="comment">// useage</span></span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: <span class="string">&quot;ie &gt;= 8&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;corejs&quot;</span>: <span class="number">2</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://segmentfault.com/a/1190000018721165">史上最清晰易懂的 babel 配置解析</a></li><li><a href="https://blog.windstone.cc/es6/babel/babel-v7.html#preset">Babel 7</a></li><li><a href="https://mp.weixin.qq.com/s/qetiJo47IyssYWAr455xHQ">一口(很长的)气了解 Babel</a></li><li><a href="https://segmentfault.com/a/1190000019577505">babel-polyfill 的相关知识</a></li><li><a href="https://juejin.im/post/5ddff3abe51d4502d56bd143">不容错过的 Babel7 知识</a></li><li><a href="https://vince.xin/2019/06/29/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E4%B9%8B-%E2%80%94%E2%80%94-babel-%E5%85%A8%E5%AE%B6%E6%A1%B6/#babel-%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B">傻傻分不清之 —— babel 全家桶</a></li><li><a href="https://github.com/ShowJoy-com/showjoy-blog/issues/39">import、require、export、module.exports 混合使用详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/22782487">在 2016 年学 JavaScript 是一种什么样的体验？</a></li><li><a href="https://printempw.github.io/how-could-i-use-es6-modules-in-production/">我 TMD 到底要怎样才能在生产环境中用上 ES6 模块化？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文需要重新整理&lt;/p&gt;
&lt;h3 id=&quot;Babel&quot;&gt;&lt;a href=&quot;#Babel&quot; class=&quot;headerlink&quot; title=&quot;Babel&quot;&gt;&lt;/a&gt;Babel&lt;/h3&gt;&lt;p&gt;关于 Babel 相信大家都不陌生，自从 ES2015 提供了一些新的语法让众多前端</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://sdongzhi.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="Babel" scheme="https://sdongzhi.com/tags/Babel/"/>
    
    <category term="前端工程化" scheme="https://sdongzhi.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用Eslint&amp;Prettier来统一代码风格</title>
    <link href="https://sdongzhi.com/2020/04/23/eslint-prettier/"/>
    <id>https://sdongzhi.com/2020/04/23/eslint-prettier/</id>
    <published>2020-04-23T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>当我们进行开发的时候，每个人写的代码风格不统一是很让人不爽的一件事情，那么如何来解决这个问题呢，首先我们需要选定一种规范；这里常用的规范有这两种</p><ul><li><a href="https://github.com/airbnb">Airbnb</a></li><li><a href="https://standardjs.com/">Standardjs</a></li></ul><p><img src="https://cdn.darknights.cn/assets/images/in-post/eslint/airbnb.png" loading="lazy"><br><img src="https://cdn.darknights.cn/assets/images/in-post/eslint/standard.png" loading="lazy"></p><p>这个两种规范都可以，但是这里推荐使用第一种。在选择了一种规范后如何来遵守呢。这里就要使用我们的神器<code>Eslint</code>,Eslint 是一个 JS Linter 工具</p><blockquote><p>它的灵感来源于 PHP Linter，将源代码解析成 AST，然后检测 AST 来判断代码是否符合规则。ESLint 使用 esprima 将源代码解析吃成 AST，然后你就可以使用任意规则来检测 AST 是否符合预期，这也是 ESLint 高可扩展性的原因。</p></blockquote><p>Lint 工具</p><blockquote><p>代码检查是一种静态的分析，常用于寻找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。</p></blockquote><blockquote><p>JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调试。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。</p></blockquote><p>不过我们通常不会单独来使用，一般情况都是在编辑器上安装插件，这样开发的时候才能直接看到不符合规范的地方别将其解决。另外，编辑器仍然推荐<code>vscode</code>或者<code>webstorm</code>。</p><p>到这里我们已经有了规范标准跟代码的校验工具，我们还需要<code>Prettier</code>,有了它我们就可以随心所欲的写代码，同字面意思 Prettier 让我们的代码更漂亮一些。可以选择启动一个 nodejs 服务来监听文件变化也可以使用编辑器自带的 watch 功能，通常我们希望格式化的过程是自动的因此我们选择设置编辑器自动保存，自动保存的时候执行代码检查跟格式化的操作,这样也不需要单独起服务。</p><h3 id="vsCode"><a href="#vsCode" class="headerlink" title="vsCode"></a>vsCode</h3><p>以<code>vscode</code>为例，首先安装这两款插件<code>Prettier</code>，<code>Eslint</code>。<br>然后全局安装 <code>Prettier</code>跟<code>Eslint</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier --dev --exact</span><br><span class="line"># or globally</span><br><span class="line">yarn global add prettier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ npm install -g eslint</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后开始配置 Prettier,这个一般按照官方给出的<a href="https://prettier.io/docs/en/options.html">基本配置</a>,一般需要调节就这几项或者使用默认配置即可，另外还可以通过 override 来对不同类型的文件执行一些规则。prettier 本身的可配置项确实比较少，他本身就是为了让用户少思考这些风格，把代码风格全部交给他.</p><p>废话说完直接开干</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir awesome-project</span><br><span class="line">$ cd awesome-project</span><br><span class="line">$ npm init -y</span><br><span class="line">$ eslint --init</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置-Prettier"><a href="#配置-Prettier" class="headerlink" title="配置 Prettier"></a>配置 Prettier</h3><p>一共有三种方式支持对 Prettier 进行配置：</p><ul><li>根目录创建.prettierrc 文件，能够写入 YML、JSON 的配置格式，并且支持.yaml/.yml/.json/.js 后缀；</li><li>根目录创建.prettier.config.js 文件，并对外 export 一个对象；</li><li>在 package.json 中新建 prettier 属性。</li></ul><p>我们选择<code>.prettierrc.js</code>来配置,一下配置可以根据自己的喜好来配置或者使用 Prettier 的默认配置也没毛病</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使用分号, 默认true</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// use double quotes instead of single quotes in jsx</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 行尾逗号,默认none,可选 none|es5|all</span></span><br><span class="line">  <span class="comment">// es5 包括es5中的数组、对象</span></span><br><span class="line">  <span class="comment">// all 包括函数对象等所有可选</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="comment">// JSX标签闭合位置 默认false</span></span><br><span class="line">  <span class="comment">// false: &lt;div</span></span><br><span class="line">  <span class="comment">//          className=&quot;&quot;</span></span><br><span class="line">  <span class="comment">//          style=&#123;&#123;&#125;&#125;</span></span><br><span class="line">  <span class="comment">//       &gt;</span></span><br><span class="line">  <span class="comment">// true: &lt;div</span></span><br><span class="line">  <span class="comment">//          className=&quot;&quot;</span></span><br><span class="line">  <span class="comment">//          style=&#123;&#123;&#125;&#125; &gt;</span></span><br><span class="line">  <span class="attr">jsxBracketSameLine</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">bracketSpacing</span>: <span class="literal">true</span>, <span class="comment">//对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125;</span></span><br><span class="line">  <span class="comment">// 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line">  <span class="comment">// avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line">  <span class="comment">// always 总是有括号</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&quot;avoid&quot;</span>,</span><br><span class="line">  <span class="comment">// decide whether to break the html according to the display style</span></span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">  <span class="comment">//parser: &quot;babylon&quot; //代码的解析引擎，默认为babylon，与babel相同。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="配置-Eslint"><a href="#配置-Eslint" class="headerlink" title="配置 Eslint"></a>配置 Eslint</h3><p>接下来开始配置 Eslint</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">commonjs</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">jest</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;airbnb&quot;</span>, <span class="string">&quot;plugin:vue/essential&quot;</span>, <span class="string">&quot;plugin:prettier/recommended&quot;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">&quot;generator-star-spacing&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">&quot;no-debugger&quot;</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;error&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsx-a11y/href-no-hash&quot;</span>: [<span class="string">&quot;off&quot;</span>],</span><br><span class="line">    <span class="string">&quot;react/jsx-filename-extension&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.jsx&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;max-len&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">ignoreComments</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">ignoreTrailingComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreUrls</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreStrings</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreTemplateLiterals</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreRegExpLiterals</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时这里也推荐 AlloyTeam 的 <a href="https://github.com/AlloyTeam/eslint-config-alloy">eslint-config-alloy</a>。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://mp.weixin.qq.com/s/X2gShxrCw0ukZigjE_45kA">深入理解 ESLint</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651230875&idx=1&sn=092211db96adfc85a26b457f7e9421a0&chksm=bd494b1f8a3ec20902ad0df7d6a3735b536fe585086abc9035fe24d69549bb4c81cf88658515&scene=21#wechat_redirect">ESLint 工作原理探讨</a></li><li><a href="https://segmentfault.com/a/1190000015315545">使用 ESLint+Prettier 来统一前端代码风格</a></li><li><a href="https://www.meteorlxy.cn/posts/2019/08/05/understand-and-use-prettier.html">理解 Prettier 并用它统一你的代码风格</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h3&gt;&lt;p&gt;当我们进行开发的时候，每个人写的代码风格不统一是很让人不爽的一件事情，那么如何来解决这个问题呢，首先我们需要选定一种规范；这</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://sdongzhi.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="前端工程化" scheme="https://sdongzhi.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="eslint" scheme="https://sdongzhi.com/tags/eslint/"/>
    
    <category term="prettier" scheme="https://sdongzhi.com/tags/prettier/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化思考</title>
    <link href="https://sdongzhi.com/2020/03/31/frontend-engineering/"/>
    <id>https://sdongzhi.com/2020/03/31/frontend-engineering/</id>
    <published>2020-03-31T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端工程化思考"><a href="#前端工程化思考" class="headerlink" title="前端工程化思考"></a>前端工程化思考</h3><p><a href="https://www.google.com.hk/search?safe=strict&es_sm=91&q=%E5%89%8D%E7%AB%AF%E9%9B%86%E6%88%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&revid=1986939511&sa=X&ei=uqT7VKjBAaelmQXeyIGIBg&ved=0CFsQ1QIoAA&biw=1415&bih=805">前端集成解决方案</a></p><p>前端工程化出现的最终目的还是为了提升开发效率和运行性能。<br>从早期的选择类库与框架到<code>gulp/grunt</code>等构建构建工具的使用都是围绕着这个最终目的来进行的。</p><p>引用<a href="https://github.com/fouber">fouber</a>的话，前端工程化大致分这几个阶段</p><ul><li>第一阶段：库/框架的选型</li><li>第二阶段：简单的构建化</li><li>第三阶段：JS/CSS模块化</li><li>第四阶段：组件化开发和“智能”静态资源管理 </li></ul><p>选择jQuery,Vue,ReactJs等框架或者类库就属于第一阶段，使用gulp或者webpack等等不同的工具对静态资源进行处理属于第二阶段，目前可能大部分人属于第二阶段，至于JS和Css模块化目前基于Vue和React的框架都是使用webpack打包内置了这个概念。然后我们需要知道为什么要这么做以及怎样做</p><p>So, 我们需要脱离这种刀耕火种的原始状态。让我们的开发更加流畅顺滑。</p><blockquote><p>前端集成解决方案，英文翻译为 Front-end Integrated Solution，缩写 fis，发音 [fɪs]</p></blockquote><ul><li>前端：指前端领域，即 web 研发中常用的浏览器客户端相关技术，比如 html、js、css 等</li><li>集成：将一些孤立的事物或元素通过某种方式改变原有的分散状态集中在一起，产生联系，从而构成一个有机整体的过程。</li><li>解决方案：针对某些已经体现出的，或者可以预期的问题，不足，缺陷，需求等等，所提出的一个解决问题的方案，同时能够确保加以有效的执行。</li></ul><h3 id="不同的项目不同的架构"><a href="#不同的项目不同的架构" class="headerlink" title="不同的项目不同的架构"></a>不同的项目不同的架构</h3><p>前端而言，我们目前接触到的项目一般会分为SPA单页应用和MPA多页应用, 通常对于门户网站我倾向于多页应用，一是可能每个页面之前可能关系不大使用多页面将功能拆分开会容易一点，再就是技术选型比较随意一点，还有一个原因是SEO,虽然可以通过服务端渲染首屏来解决这个问题但这种解决方案跟NodeJS搭配应该会比较舒服（基于Java的服务端渲染我了解不足），如果后台换了呢，我们希望能有一套通用的解决方案而不想跟后台或者前端框架绑定的太过严重。</p><p>我们所有的方案都需要满足一些条件可以<br><img src="https://cdn.darknights.cn/assets/images/in-post/engine/book.jpg" loading="lazy"></p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/fouber/blog/issues/10#">前端工程化基础</a></li><li><a href="https://github.com/fouber/blog/issues/3">前端工程与性能优化</a></li><li><a href="https://github.com/fouber/blog/issues/4">前端工程与模块化框架</a></li><li><a href="https://github.com/fouber/blog/issues/6">大公司里怎样开发和部署前端代码</a></li><li><a href="https://github.com/fouber/blog/issues/2">前端开发体系建设日记</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前端工程化思考&quot;&gt;&lt;a href=&quot;#前端工程化思考&quot; class=&quot;headerlink&quot; title=&quot;前端工程化思考&quot;&gt;&lt;/a&gt;前端工程化思考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.google.com.hk/search?safe=str</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://sdongzhi.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="javascript" scheme="https://sdongzhi.com/tags/javascript/"/>
    
    <category term="前端工程化" scheme="https://sdongzhi.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>重读React系列(一)</title>
    <link href="https://sdongzhi.com/2020/01/02/react-read-one/"/>
    <id>https://sdongzhi.com/2020/01/02/react-read-one/</id>
    <published>2020-01-02T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近做东西的时候发现一些React的新的特性其实可以用到现有的项目中,所以打算重读一些React的文档,读的时候发现其实很多之前不理解的东西在文档中已经有答案了,<br>所以我认为有必要重新细读一下文档,将一些点总结下来.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近做东西的时候发现一些React的新的特性其实可以用到现有的项目中,所以打算重读一些React的文档,读的时候发现其实很多之前不理解的东西在文档中已经有答案了,&lt;br&gt;所以我认为有必要重新细读一下文档,将一些点总结下来.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="React" scheme="https://sdongzhi.com/categories/React/"/>
    
    
    <category term="javascript" scheme="https://sdongzhi.com/tags/javascript/"/>
    
    <category term="React" scheme="https://sdongzhi.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>新年随笔</title>
    <link href="https://sdongzhi.com/2020/01/01/onte-one/"/>
    <id>https://sdongzhi.com/2020/01/01/onte-one/</id>
    <published>2020-01-01T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>今天是2020年元旦了,又是新的一年.回顾这一年对于我来说发生了实在太多的事情,亲人的离去,公司的变化,给看起来貌似稳定的生活带来了很多变数,我这个人不太喜欢变化,主要还是懒.因为懒导致自己没有成为心目中很优秀的人.其实家庭对于个人成长的影响真是至关重要,家庭的因为导致你缺少成为优秀人的潜质, 多少年之后你忽然意识到这个问题的时候,你可能需要更多的努力,才能改变这种状况. 既然意识到了你总是能够变得比现在更好.</p><h3 id="愿望"><a href="#愿望" class="headerlink" title="愿望"></a>愿望</h3><p>新的一年有一些愿望希望能够努力达成: </p><ul><li>健身.好的身体是一切的根本</li><li>技术提升&amp;实践,努力学习将技术变现</li><li>学习一门新的语言英语德语或日语</li><li>坚持每天写博客总结可以是非技术类的,也可以是小说</li></ul><p>今年一直在做新项目,业务缠身,感觉项目永远也做不完,在公司也没有什么提升,闭门造车无法走到最前沿.最好能够换个环境,明年看看形式,希望能够勇敢迈出这一步.</p><h3 id="打气"><a href="#打气" class="headerlink" title="打气"></a>打气</h3><p>最近看了胖哥的技术文章发现,技术方面真的可以走的很远,如果有人带领的话肯定事半功倍,我会利用这段时间尝试把自己变成技术大拿. 多去看源码多去总结会成功的.<br>不要否定自己,不需要妄自菲薄,踏踏实实的过每一天.2020年希望遇见更好的自己~~</p><p><a href="https://www.bilibili.com/video/av81092011/">大胖逼逼叨-程序员快速成神三部曲-基础篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h3&gt;&lt;p&gt;今天是2020年元旦了,又是新的一年.回顾这一年对于我来说发生了实在太多的事情,亲人的离去,公司的变化,给看起来貌似稳定的生活带来了很多变数</summary>
      
    
    
    
    <category term="随笔" scheme="https://sdongzhi.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://sdongzhi.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript内置对象之数组</title>
    <link href="https://sdongzhi.com/2019/11/12/js-array/"/>
    <id>https://sdongzhi.com/2019/11/12/js-array/</id>
    <published>2019-11-12T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<p>本文为了详细记录JavaScript内置对象中的一些方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文为了详细记录JavaScript内置对象中的一些方法&lt;/p&gt;
</summary>
      
    
    
    
    <category term="js基础知识" scheme="https://sdongzhi.com/categories/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="javascript" scheme="https://sdongzhi.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>URL编码</title>
    <link href="https://sdongzhi.com/2019/10/16/url-encode/"/>
    <id>https://sdongzhi.com/2019/10/16/url-encode/</id>
    <published>2019-10-16T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>前几天的时候做了一个领奖的公众号,回调的时候url中会自动带过来一个使用des3加密的orderId, 本来在测试环境的时候是没有问题的,但是到了线上却出现了问题,经过排查发现加密串本来是<code>tq+3wB8PdfY=</code>, 传到后台的错误结果是<code>tq%203wB8PdfY%3D</code>,但是真实需要传给后台的却是<code>tq%2B3wB8PdfY%3D</code>. 因此在这里将该问题总结一下.转载自<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">关于URL编码</a></p><h3 id="需要知道"><a href="#需要知道" class="headerlink" title="需要知道"></a>需要知道</h3><p>首先需要知道的是一般来说，URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。比如，世界上有英文字母的网址”<a href="http://www.abc.com&quot;,但是没有希腊字母的网址&quot;http//www.a%CE%B2%CE%B3.com&quot;%EF%BC%88%E8%AF%BB%E4%BD%9C%E9%98%BF%E5%B0%94%E6%B3%95-%E8%B4%9D%E5%A1%94-%E4%BC%BD%E7%8E%9B.com%EF%BC%89%E3%80%82%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E7%BD%91%E7%BB%9C%E6%A0%87%E5%87%86RFC">http://www.abc.com&quot;，但是没有希腊字母的网址&quot;http://www.aβγ.com&quot;（读作阿尔法-贝塔-伽玛.com）。这是因为网络标准RFC</a> 1738做了硬性规定：</p><blockquote><p>“…Only alphanumerics [0-9a-zA-Z], the special characters “$-<em>.+!*’(),” [not including the quotes - ed], and reserved characters used for their reserved purposes may be used unencoded within a URL.”<br>“只有字母和数字[0-9a-zA-Z]、一些特殊符号”$-</em>.+!*’(),”[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。”</p></blockquote><p>这意味着，如果URL中有汉字，就必须编码后使用。但是麻烦的是，RFC 1738没有规定具体的编码方法，而是交给应用程序（浏览器）自己决定。这导致”URL编码”成为了一个混乱的领域。</p><h3 id="不同情况下URL编码"><a href="#不同情况下URL编码" class="headerlink" title="不同情况下URL编码"></a>不同情况下URL编码</h3><h4 id="1-当汉字出现在URL中"><a href="#1-当汉字出现在URL中" class="headerlink" title="1.当汉字出现在URL中"></a>1.当汉字出现在URL中</h4><p>IE现在的使用率的确低,这里出现只为了做对比.<br>在IE8浏览器中输入网址<code><a href="http://zh.wikipedia.org/wiki/%E6%98%A5%E8%8A%82">http://zh.wikipedia.org/wiki/春节</a></code>,会怎么样呢?</p><ul><li>我们刚刚说过汉字不可以不编码直接用于url,这里直接用的后果就是不同的浏览器会按照各种的方式进行编码</li></ul><p>我们查看请求头发现IE实际查询的网址是<code><a href="http://zh.wikipedia.org/wiki/%E6%98%A5%E8%8A%82">http://zh.wikipedia.org/wiki/%E6%98%A5%E8%8A%82</a></code>, 也就是说IE自动将<code>春节</code>编码成<code>%E6%98%A5%E8%8A%82</code></p><p>“春”和”节”的utf-8编码分别是”E6 98 A5”和”E8 8A 82”，因此，”%E6%98%A5%E8%8A%82”就是按照顺序，在每个字节前加上%而得到的, 网址路径的编码，用的是utf-8编码(FireFox中结果也一样)。</p><p><code>所以当汉字出现在url中的时,网址路径的编码用的时utf-8编码.</code></p><h4 id="2-汉字出现在查询字符串中"><a href="#2-汉字出现在查询字符串中" class="headerlink" title="2.汉字出现在查询字符串中"></a>2.汉字出现在查询字符串中</h4><p>在IE8浏览器中输入网址<code><a href="http://www.baidu.com/s?wd=%E6%98%A5%E8%8A%82">http://www.baidu.com/s?wd=春节</a></code>, <code>春节</code>这两个字此时属于查询字符串，不属于网址路径.<br>查看http请求头信息,IE将<code>春节</code>转化成了一个乱码.切换成16进制才能清楚看到这两个字被转成了<code>B4 BA BD DA</code><br>“春”和”节”的GB2312编码（”Windows xp”中文版的默认编码）分别是”B4 BA”和”BD DA”。因此，IE实际上就是将查询字符串，以GB2312编码的格式发送出去。</p><p>Firefox跟Chrome发送的请求头如下, 同样采用GB2312编码，但是在每个字节前加上了%;</p><p><code>所以查询字符串的编码，用的是操作系统的默认编码。</code></p><h4 id="3-Get方法生成的URL包含汉字"><a href="#3-Get方法生成的URL包含汉字" class="headerlink" title="3.Get方法生成的URL包含汉字"></a>3.Get方法生成的URL包含汉字</h4><p>上面的情况都是直接在浏览器中输入url的情况, 更常见的情况是，在已打开的网页上，直接用Get或Post方法发出HTTP请求。<br>根据<a href="http://xml-nchu.blogspot.com/p/url.html">台湾中兴大学吕瑞麟老师的试验</a>, 这时的编码方法由网页的编码决定，也就是由HTML源码中字符集的设定决定.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=xxxx&quot;&gt;</span><br></pre></td></tr></table></figure><p>如果上面这一行最后的charset是UTF-8，则URL就以UTF-8编码；如果是GB2312，URL就以GB2312编码。</p><p>举例来说，百度是GB2312编码，Google是UTF-8编码。因此，从它们的搜索框中搜索同一个词”春节”，生成的查询字符串是不一样的。</p><ul><li>百度生成的是%B4%BA%BD%DA，这是GB2312编码。</li><li>Google生成的是%E6%98%A5%E8%8A%82，这是UTF-8编码。</li></ul><p><code>GET和POST方法的编码，用的是网页的编码</code></p><h4 id="4-Ajax调用URL包含汉字"><a href="#4-Ajax调用URL包含汉字" class="headerlink" title="4.Ajax调用URL包含汉字"></a>4.Ajax调用URL包含汉字</h4><p>前几种情况都是浏览器发送HTTP请求,Ajax是JavaScript来生成HTTP请求,也就是Ajax调用. 这种情况传送给服务器的参数,IE总是采用操作系统默认编码, Chrome则是Utf-8编码.</p><h3 id="编码解码的方法"><a href="#编码解码的方法" class="headerlink" title="编码解码的方法"></a>编码解码的方法</h3><p><code>escape</code>跟<code>unescape</code>,已经不推荐使用. 它的具体规则是，除了ASCII字母、数字、标点符号”@ * _ + - . /“以外，对其他所有字符进行编码。在\u0000到\u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">escape(&quot;春节&quot;);</span><br><span class="line">// %u6625%u8282</span><br><span class="line"></span><br><span class="line">escape(&quot;Hello World&quot;);</span><br><span class="line">// Hello%20World</span><br><span class="line"></span><br><span class="line">unescape(&quot;%u6625%u8282&quot;)</span><br><span class="line">// 春节</span><br><span class="line"></span><br><span class="line">unescape(&quot;\u6625\u8282&quot;)</span><br><span class="line">// 春节</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这两个方法不推荐使用.</p><p><code>encodeURI</code>是Javascript中真正用来对URL编码的函数。但是对于以下网址中有特殊含义的符号不进行编码.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; / ? : @ &amp; = + $ , #</span><br></pre></td></tr></table></figure><p>相反的<code>encodeURIComponent</code>方法会将上面的符号也进行编码.<br><code>decodeURI</code>和<code>decodeURIComponent</code>是相应的解码方法</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>再回到一开始的问题</p><ul><li>第一步浏览器url拿到的查询参数是正确的<code>tq%2B3wB8PdfY%3D</code></li><li>第二步代码中获取到的参数变量也是正确的<code>tq+3wB8PdfY=</code></li><li>第三部利用该参数向url中拼接跳转下一步页面例如 /xxx/xxx?orderId=tq+3wB8PdfY 到这里其实是有问题的浏览器会自动将<code>+</code>号转为空格</li></ul><blockquote><p>escape()不对”+”编码。但是我们知道，网页在提交表单的时候，如果有空格，则会被转化为+字符。服务器处理数据的时候，会把+号处理成空格。所以，使用的时候要小心。</p></blockquote><p>从这里开始再向后台传参数就不会拿到正确的地址了,其实要解决很简单使用<code>encodeURIComponent</code>编码一下就可以,其实vue和react的框架其实自己可以转换,但是要正确使用跳转URL的方法.</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/u014785687/article/details/74078512">不同浏览器中URL的编码方式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;前几天的时候做了一个领奖的公众号,回调的时候url中会自动带过来一个使用des3加密的orderId, 本来在测试环境的时候是没有问题的,但</summary>
      
    
    
    
    <category term="基础" scheme="https://sdongzhi.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JavaScript" scheme="https://sdongzhi.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器输入 URL 回车之后发生了什么</title>
    <link href="https://sdongzhi.com/2019/09/16/browser-input-all/"/>
    <id>https://sdongzhi.com/2019/09/16/browser-input-all/</id>
    <published>2019-09-16T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<p>不久前看了一篇文章<a href="https://4ark.me/post/b6c7c0a2.html">在浏览器输入 URL 回车之后发生了什么</a>, 感觉讲的实在很好所以在此我也想总结一下,当自己被问到这个问题的时候会如何回答呢?</p><p>在浏览器输入 URL 回车之后发生了什么？<br>大致流程如下</p><ul><li>1.URL解析</li><li>2.DNS查询；</li><li>3.建立TCP连接；</li><li>4.发送HTTP请求；</li><li>5.服务器处理请求；</li><li>6.返回响应结果；</li><li>7.关闭TCP连接；</li><li>8.浏览器解析HTML；</li><li>9.浏览器布局渲染；</li></ul><p>当我们在浏览器输入网址回车后,一切从这里开始</p><h3 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h3><blockquote><p><code>HSTS(HTTP Strict Transport Security), 强制客户端使用 HTTPS 访问页面</code>,<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你不知道的HSTS</a></p></blockquote><p>首先判断你输入的是一个合法的URL还是一个带搜索的关键词</p><ul><li>如果输入的是内容则将输入内容自动编码。</li><li>输入的是网址向服务器请求我们想要的页面内容则开始进行DNS域名查询</li></ul><p>浏览器需要首先确认的是域名所对应的服务器在哪里,将域名解析成对应的服务器IP地址这项工作,是由DNS服务器来完成的.<br>客户端收到你输入的域名地址后,</p><ul><li>1.首先会从浏览器缓存中查找是否有对应域名</li><li>2.操作系统缓存</li><li>3.路由器DNS缓存</li><li>4.查找本地的hosts文件</li><li>5.ISP的DNS服务器</li><li>6.根域名服务器 <a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科</a></li></ul><blockquote><p><code>ISP</code>是<code>Internet Service Provider(因特网服务提供商)</code>的简称,ISP有专门的DNS服务器应对DNS查询请求.每一个ISP（网络服务提供商），或一个大学，甚至是一个大学里的系都会有一个自己的本地域名服务器，他会在url第一次访问时缓存该域名的指向。下次再访问时，他会从缓存里把这个url曾经指向的IP调出来。</p></blockquote><blockquote><p>ISP的DNS服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS服务器先问根域名服务器.com域名服务器的IP地址，然后再问.com域名服务器，依次类推）。</p></blockquote><h4 id="根域名服务器查询"><a href="#根域名服务器查询" class="headerlink" title="根域名服务器查询"></a>根域名服务器查询</h4><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：<br><img src="https://cdn.darknights.cn/assets/images/in-post/browser-input/search.png" loading="lazy"></p><p>需要注意的点</p><ul><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地DNS服务器的过程）</li><li>迭代方式，就是本地DNS服务器到根域名服务器查询的方式。</li><li><a href="https://www.bisend.cn/blog/dns-ji-chi-yu-wu-ran">什么是 DNS 劫持</a></li><li><a href="https://zhuanlan.zhihu.com/p/50043595">前端 dns-prefetch 优化</a></li></ul><p>递归查询：<br>    主机向本地域名服务器的查询一般都是采用递归查询。<br>    如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是返回一个失败的响应，表示无法查询到所需的IP地址</p><p>迭代查询：<br>    本地域名服务器向根域名服务器的查询通常是采用迭代查询。<br>    当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么返回给本地域名服务器所要查询的IP地址，要么返回给本地域名服务器下一步应当查询的域名服务器的IP地址。</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP/IP 分四层,在发送数据时,每层都要对数据进行封装</p><p><img src="https://cdn.darknights.cn/assets/images/in-post/browser-input/tcp.png" loading="lazy"></p><h4 id="应用层-发送HTTP请求"><a href="#应用层-发送HTTP请求" class="headerlink" title="应用层:发送HTTP请求"></a>应用层:发送HTTP请求</h4><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><h4 id="传输层-TCP传输报文"><a href="#传输层-TCP传输报文" class="headerlink" title="传输层: TCP传输报文"></a>传输层: TCP传输报文</h4><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。<a href="https://github.com/jawil/blog/issues/14">通俗解释TCP协议三次握手</a>、<a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html">计算机网络</a></p><blockquote><p><a href="https://blog.csdn.net/cpcpcp123/article/details/52739407">SYN 泛洪攻击</a></p></blockquote><h4 id="网络层-IP协议查询Mac地址"><a href="#网络层-IP协议查询Mac地址" class="headerlink" title="网络层: IP协议查询Mac地址"></a>网络层: IP协议查询Mac地址</h4><p>将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。<br>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 <a href="https://zhuanlan.zhihu.com/p/28771785">ARP 协议</a>查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 <a href="https://zhuanlan.zhihu.com/p/28771785">ARP</a> 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><h4 id="链路层-以太网协议"><a href="#链路层-以太网协议" class="headerlink" title="链路层: 以太网协议"></a>链路层: 以太网协议</h4><p>根据以太网协议将数据分为以”帧”为单位的数据包, 每一帧分为两个部分:</p><ul><li>标头: 数据包的发送者、接受者、数据类型</li><li>数据: 数据包具体内容</li></ul><blockquote><p>Mac地址<br>以太网规定了连入网络的所有设备都必须具备“网卡”接口, 数据包都是从一块网卡传递到另一块网卡,网卡地址就是Mac地址.每一个Mac地址都是独一无二的,具备了一对一的能力.</p></blockquote><blockquote><p>广播<br>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。 但是接受方回应是单播.</p></blockquote><h4 id="服务器接受请求"><a href="#服务器接受请求" class="headerlink" title="服务器接受请求"></a>服务器接受请求</h4><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><h4 id="HTTPD"><a href="#HTTPD" class="headerlink" title="HTTPD"></a>HTTPD</h4><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。<br>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><h4 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h4><p>接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>验证是否配置虚拟主机</li><li>验证虚拟主机是否接受此方法</li><li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><h4 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h4><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h3 id="浏览器接受响应"><a href="#浏览器接受响应" class="headerlink" title="浏览器接受响应"></a>浏览器接受响应</h3><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。</p><h3 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h3><p><img src="https://cdn.darknights.cn/assets/images/in-post/browser-input/core.png" loading="lazy"></p><p><img src="https://cdn.darknights.cn/assets/images/in-post/browser-input/process.png" loading="lazy"></p><h1 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h1><ul><li><a href="https://hellogithub2014.github.io/2017/09/24/how-do-network-connect/">从浏览器输入url按回车后发生了什么</a></li><li><a href="https://zhuanlan.zhihu.com/p/50043595">浏览器探究&amp;前端优化指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/28771785">ARP</a></li><li><a href="https://www.bisend.cn/blog/dns-ji-chi-yu-wu-ran">什么是DNS劫持与DNS污染</a></li><li><a href="https://juejin.im/post/59ba146c6fb9a00a4636d8b6">深入理解Http请求、DNS劫持与解析</a></li><li><a href="https://blog.csdn.net/it_rod/article/details/79939651">HTTP基础与DNS分析</a></li><li><a href="https://www.cnblogs.com/gopark/p/8430916.html">DNS原理及其解析过程</a></li><li><a href="https://4ark.me/post/b6c7c0a2.html">在浏览器输入 URL 回车之后发生了什么</a></li><li><a href="http://www.cnblogs.com/xsilence/">DNS查找域名的过程</a></li><li><a href="http://fex.baidu.com/blog/2014/05/what-happen/">从输入 URL 到页面加载完成的过程中都发生了什么事情？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不久前看了一篇文章&lt;a href=&quot;https://4ark.me/post/b6c7c0a2.html&quot;&gt;在浏览器输入 URL 回车之后发生了什么&lt;/a&gt;, 感觉讲的实在很好所以在此我也想总结一下,当自己被问到这个问题的时候会如何回答呢?&lt;/p&gt;
&lt;p&gt;在浏览器输入 UR</summary>
      
    
    
    
    <category term="面试" scheme="https://sdongzhi.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="HSTS" scheme="https://sdongzhi.com/tags/HSTS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题总结(简单版五)</title>
    <link href="https://sdongzhi.com/2019/09/08/leetcode-five/"/>
    <id>https://sdongzhi.com/2019/09/08/leetcode-five/</id>
    <published>2019-09-08T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。</p><h3 id="1-两个数组的交集"><a href="#1-两个数组的交集" class="headerlink" title="1.两个数组的交集"></a>1.两个数组的交集</h3><p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">两个数组的交集</a>：<br>给定两个数组，编写一个函数来计算它们的交集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出: [2]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出: [9,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>输出结果中的每个元素一定是唯一的。</li><li>我们可以不考虑输出结果的顺序。</li></ul><h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><p>自己的解法常规思路不推荐</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> resultDup = [];</span><br><span class="line">    nums1.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        nums2.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(val == v) &#123;</span><br><span class="line">                resultDup.push(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">while</span>(resultDup.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val = resultDup.shift();</span><br><span class="line">        <span class="keyword">if</span>(resultDup.indexOf(val) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.push(val);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样js解法利用Set去重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash1 = <span class="keyword">new</span> <span class="built_in">Set</span>(nums1)</span><br><span class="line">    <span class="keyword">let</span> hash2 = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(has1.has(nums2[i])) &#123;</span><br><span class="line">            hash2.add(nums2[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [...hash2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用数组api解法,更简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(nums1.filter(<span class="function"><span class="params">v</span> =&gt;</span> nums2.includes(v)))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Integer n : nums1) set1.add(n);</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Integer n : nums2) set2.add(n);</span><br><span class="line"></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[set1.size()];</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s : set) output[idx++] = s;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-独一无二的出现次数"><a href="#2-独一无二的出现次数" class="headerlink" title="2.独一无二的出现次数"></a>2.独一无二的出现次数</h3><p> <a href="https://leetcode-cn.com/problems/unique-number-of-occurrences/">独一无二的出现次数</a>:<br> 给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。</p><p>如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</p><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 1000</li><li>-1000 &lt;= arr[i] &lt;= 1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：arr = [1,2,2,1,1,3]</span><br><span class="line">输出：true</span><br><span class="line">解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：arr = [1,2]</span><br><span class="line">输出：false</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]</span><br><span class="line">输出：true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-1"><a href="#答案一-1" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniqueOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objMap = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(objMap.hasOwnProperty(val)) &#123;</span><br><span class="line">            objMap[val]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            objMap[val] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> arr1 = <span class="built_in">Object</span>.values(objMap);</span><br><span class="line">    <span class="keyword">let</span> arr2 = [...new <span class="built_in">Set</span>(arr1)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr1.length === arr2.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-1"><a href="#答案二-1" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        Set&lt;Inetger&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> data: arr) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(data) == <span class="keyword">null</span>) map.put(data,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> map.put(data, map.get(data) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Integer i : map.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(i)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-转置矩阵"><a href="#3-转置矩阵" class="headerlink" title="3.转置矩阵"></a>3.转置矩阵</h3><p><a href="https://leetcode-cn.com/problems/transpose-matrix/submissions/">转置矩阵</a>:<br>给定一个矩阵 A， 返回 A 的转置矩阵。</p><p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p><p>提示：</p><ul><li>1 &lt;= A.length &lt;= 1000</li><li>1 &lt;= A[0].length &lt;= 1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[[1,4,7],[2,5,8],[3,6,9]]</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[[1,2,3],[4,5,6]]</span><br><span class="line">输出：[[1,4],[2,5],[3,6]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-2"><a href="#答案一-2" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> transpose = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = A[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> alen = A.length;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmpl = [];</span><br><span class="line">        A.forEach(<span class="function">(<span class="params">val, idex</span>) =&gt;</span> &#123;</span><br><span class="line">            tmpl.push(val[i]);</span><br><span class="line">        &#125;);</span><br><span class="line">        result.push(tmpl);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-重复-N-次的元素"><a href="#4-重复-N-次的元素" class="headerlink" title="4.重复 N 次的元素"></a>4.重复 N 次的元素</h3><p><a href="https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/submissions/">重复 N 次的元素</a>:<br>在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。</p><p>返回重复了 N 次的那个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[1,2,3,3]</span><br><span class="line">输出：3</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[2,1,2,5,3,2]</span><br><span class="line">输出：2</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：[5,1,5,2,5,3,5,4]</span><br><span class="line">输出：5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>4 &lt;= A.length &lt;= 10000</li><li>0 &lt;= A[i] &lt; 10000</li><li>A.length 为偶数</li></ul><h4 id="答案一-3"><a href="#答案一-3" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> repeatedNTimes = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    A.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b);</span><br><span class="line">    <span class="keyword">let</span> len = A.length;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> cur = A[i]</span><br><span class="line">            <span class="keyword">let</span> prev = A[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(cur - prev === <span class="number">0</span>) &#123;</span><br><span class="line">                result = cur;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-按奇偶排序数组-II"><a href="#5-按奇偶排序数组-II" class="headerlink" title="5.按奇偶排序数组 II"></a>5.按奇偶排序数组 II</h3><p><a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/">按奇偶排序数组 II</a>:<br>给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。</p><p>对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。</p><p>你可以返回任何满足上述条件的数组作为答案。</p><p>提示：</p><ul><li>2 &lt;= A.length &lt;= 20000</li><li>A.length % 2 == 0</li><li>0 &lt;= A[i] &lt;= 1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：[4,2,5,7]</span><br><span class="line">输出：[4,5,2,7]</span><br><span class="line">解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</span><br></pre></td></tr></table></figure><h4 id="答案一-4"><a href="#答案一-4" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArrayByParityII = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = A.length;</span><br><span class="line">    <span class="keyword">let</span> oArr = A.filter(<span class="function"><span class="params">val</span> =&gt;</span> (val % <span class="number">2</span> !== <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">let</span> eArr = A.filter(<span class="function"><span class="params">val</span> =&gt;</span> (val % <span class="number">2</span> === <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            result.push(eArr.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(oArr.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-2"><a href="#答案二-2" class="headerlink" title="答案二"></a>答案二</h4><p>java容易理解的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sortArrayByParityII(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(odd &lt; len &amp;&amp; even &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span>(odd &lt; len &amp;&amp; arr[odd] % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                odd += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(even &lt; len &amp;&amp; arr[even] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                even += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(odd &lt; len &amp;&amp; even &lt; len) &#123;</span><br><span class="line">                swap(arr, odd, even);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> odd, <span class="keyword">int</span> even)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[odd];</span><br><span class="line">        arr[odd] = arr[even];</span><br><span class="line">        arr[even] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案三"><a href="#答案三" class="headerlink" title="答案三"></a>答案三</h4><p>js双指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortArrayByParityII = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> len = A.length,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(A[j] % <span class="number">2</span> === <span class="number">1</span>);j += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        [A[i], A[j]] = [A[j], A[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-单值二叉树"><a href="#6-单值二叉树" class="headerlink" title="6.单值二叉树"></a>6.单值二叉树</h3><p><a href="https://leetcode-cn.com/problems/univalued-binary-tree/">单值二叉树</a>:<br>如果二叉树每个节点都具有相同的值，那么该二叉树就是单值二叉树。</p><p>只有给定的树是单值二叉树时，才返回 true；否则返回 false。</p><p>提示：</p><ul><li>给定树的节点数范围是 [1, 100]。</li><li>每个节点的值都是整数，范围为 [0, 99] 。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[1,1,1,1,1,null,1]</span><br><span class="line">输出：true</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[2,2,2,5,2]</span><br><span class="line">输出：false</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-5"><a href="#答案一-5" class="headerlink" title="答案一"></a>答案一</h4><p>更优雅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root, root.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(val != root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, val) &amp;&amp; helper(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        IsUnivalTree(root, root.val);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsUnivalTree</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val == val) &#123;</span><br><span class="line">            IsunivalTree(root.left, val);</span><br><span class="line">            IsunivalTree(root.right, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isUnivalTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> helper(root, root.val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">root, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val !== val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> helper(root.left, val) &amp;&amp; helper(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-找出给定方程的正整数解"><a href="#7-找出给定方程的正整数解" class="headerlink" title="7.找出给定方程的正整数解~~~"></a>7.找出给定方程的正整数解~~~</h3><p><a href="https://leetcode-cn.com/problems/find-positive-integer-solution-for-a-given-equation/">找出给定方程的正整数解</a>:<br>给出一个函数  f(x, y) 和一个目标结果 z，请你计算方程 f(x,y) == z 所有可能的正整数 数对 x 和 y。</p><p>给定函数是严格单调的，也就是说：</p><p>f(x, y) &lt; f(x + 1, y)</p><p>f(x, y) &lt; f(x, y + 1)<br>函数接口定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface CustomFunction &#123;</span><br><span class="line">public:</span><br><span class="line">  // Returns positive integer f(x, y) for any given positive integer x and y.</span><br><span class="line">  int f(int x, int y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你想自定义测试，你可以输入整数 function_id 和一个目标结果 z 作为输入，其中 function_id 表示一个隐藏函数列表中的一个函数编号，题目只会告诉你列表中的 2 个函数。  </p><p>你可以将满足条件的 结果数对 按任意顺序返回。</p><p>提示：</p><ul><li>1 &lt;= function_id &lt;= 9</li><li>1 &lt;= z &lt;= 100</li><li>题目保证 f(x, y) == z 的解处于 1 &lt;= x, y &lt;= 1000 的范围内。</li><li>在 1 &lt;= x, y &lt;= 1000 的前提下，题目保证 f(x, y) 是一个 32 位有符号整数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：function_id = 1, z = 5</span><br><span class="line">输出：[[1,4],[2,3],[3,2],[4,1]]</span><br><span class="line">解释：function_id = 1 表示 f(x, y) = x + y</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：function_id = 2, z = 5</span><br><span class="line">输出：[[1,5],[5,1]]</span><br><span class="line">解释：function_id = 2 表示 f(x, y) = x * y</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-6"><a href="#答案一-6" class="headerlink" title="答案一"></a>答案一</h4><p>分析:题目没有看懂,但是可以读懂代码</p><p>双层循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the CustomFunction&#x27;s API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * function CustomFunction() &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@param <span class="type">&#123;integer, integer&#125;</span> </span>x, y</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@return <span class="type">&#123;integer&#125;</span></span></span></span><br><span class="line"><span class="comment"> *     this.f = function(x, y) &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;CustomFunction&#125;</span> <span class="variable">customfunction</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> <span class="variable">z</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;integer[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findSolution = <span class="function"><span class="keyword">function</span>(<span class="params">customfunction, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> x = <span class="number">1</span>; x &lt;= <span class="number">1000</span>; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> y = <span class="number">1</span>; y &lt;= <span class="number">1000</span>; y++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(customfunction.f(x, y) &gt; z) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(x, y) === z) &#123;</span><br><span class="line">                <span class="keyword">let</span> ans = [x, y];</span><br><span class="line">                res.push(ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>双指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the CustomFunction&#x27;s API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * function CustomFunction() &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@param <span class="type">&#123;integer, integer&#125;</span> </span>x, y</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@return <span class="type">&#123;integer&#125;</span></span></span></span><br><span class="line"><span class="comment"> *     this.f = function(x, y) &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;CustomFunction&#125;</span> <span class="variable">customfunction</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> <span class="variable">z</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;integer[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findSolution = <span class="function"><span class="keyword">function</span>(<span class="params">customfunction, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">1000</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(customfunction.f(x, y) === z) &#123;</span><br><span class="line">            <span class="keyword">let</span> ans = [x ,y];</span><br><span class="line">            res.push(ans);</span><br><span class="line">            x++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(x, y) &gt; z) &#123;</span><br><span class="line">            y--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-Excel表列序号"><a href="#8-Excel表列序号" class="headerlink" title="8.Excel表列序号"></a>8.Excel表列序号</h3><p><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/submissions/">Excel表列序号</a>:</p><p>给定一个Excel表格中的列名称，返回其相应的列序号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例如，</span><br><span class="line"></span><br><span class="line">    A -&gt; 1</span><br><span class="line">    B -&gt; 2</span><br><span class="line">    C -&gt; 3</span><br><span class="line">    ...</span><br><span class="line">    Z -&gt; 26</span><br><span class="line">    AA -&gt; 27</span><br><span class="line">    AB -&gt; 28 </span><br><span class="line">    ...</span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;A&quot;</span><br><span class="line">输出: 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;AB&quot;</span><br><span class="line">输出: 28</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;ZY&quot;</span><br><span class="line">输出: 701</span><br></pre></td></tr></table></figure><h4 id="答案一-7"><a href="#答案一-7" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = s.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> len = arr.length;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= len) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = arr.pop();</span><br><span class="line">        <span class="keyword">let</span> cur = num.charCodeAt() - <span class="number">64</span>;</span><br><span class="line">        sum += cur * <span class="built_in">Math</span>.pow(<span class="number">26</span>, i - <span class="number">1</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="9-反转链表"><a href="#9-反转链表" class="headerlink" title="9.反转链表"></a>9.反转链表</h3><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a>:<br>反转一个单链表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NUL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进阶:</p><ul><li>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</li></ul><h4 id="答案一-8"><a href="#答案一-8" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode nextTemp = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverstList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode p = reverstList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。&lt;/p&gt;
&lt;h3 id=&quot;1-两个数组的交集&quot;&gt;&lt;a href=&quot;#1-两个数组的交集&quot; class=&quot;headerlink&quot; title=&quot;1.两个</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://sdongzhi.com/categories/LeetCode/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="LeetCode" scheme="https://sdongzhi.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题总结(简单版四)</title>
    <link href="https://sdongzhi.com/2019/09/07/leetcode-four/"/>
    <id>https://sdongzhi.com/2019/09/07/leetcode-four/</id>
    <published>2019-09-07T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。</p><h3 id="1-反转字符串中的单词-III"><a href="#1-反转字符串中的单词-III" class="headerlink" title="1.反转字符串中的单词 III"></a>1.反转字符串中的单词 III</h3><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/submissions/">反转字符串中的单词 III</a>：<br>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p>注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;Let&#x27;s take LeetCode contest&quot;</span><br><span class="line">输出: &quot;s&#x27;teL ekat edoCteeL tsetnoc&quot; </span><br></pre></td></tr></table></figure><h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s.split(<span class="string">&#x27; &#x27;</span>).map(<span class="function"><span class="params">val</span> =&gt;</span> val.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>))).join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4><p>稍微有点取巧的做法，reverse函数也可以用双指针实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String[] sp=s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sp.length-<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder t=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">            t.append(sp[i]);</span><br><span class="line">            sb.append(t.reverse().toString()).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">0</span>,sb.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-反转字符串"><a href="#2-反转字符串" class="headerlink" title="2.反转字符串"></a>2.反转字符串</h3><p><a href="https://leetcode-cn.com/problems/reverse-string/">反转字符串</a>:<br>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-1"><a href="#答案一-1" class="headerlink" title="答案一"></a>答案一</h4><p>reverse</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-1"><a href="#答案二-1" class="headerlink" title="答案二"></a>答案二</h4><p>其实本题并不是想考reverse, 感觉应该是想考reverse的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = s.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, center = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>); i &lt; center; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> edx = len - i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> temp = s[edx];</span><br><span class="line">        s[edx] = s[i];</span><br><span class="line">        s[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-数组拆分-I"><a href="#3-数组拆分-I" class="headerlink" title="3.数组拆分 I"></a>3.数组拆分 I</h3><p><a href="https://leetcode-cn.com/problems/array-partition-i/">数组拆分 I</a>:<br>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。</p><p>提示:</p><ul><li>n 是正整数,范围在 [1, 10000].</li><li>数组中的元素范围在 [-10000, 10000].</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,4,3,2]</span><br><span class="line"></span><br><span class="line">输出: 4</span><br><span class="line">解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure><h4 id="答案一-2"><a href="#答案一-2" class="headerlink" title="答案一"></a>答案一</h4><p>首先排序 ,然后将index为奇数的进行求和.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arrayPairSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sortNums = nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    sortNums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key % <span class="number">2</span> === <span class="number">0</span>)  &#123;</span><br><span class="line">          sum += val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-键盘行"><a href="#4-键盘行" class="headerlink" title="4.键盘行"></a>4.键盘行</h3><p><a href="https://leetcode-cn.com/problems/keyboard-row/">键盘行</a>:</p><p>给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/keyboard.png" loading="lazy"><br>注意：</p><ul><li>你可以重复使用键盘上同一字符。</li><li>你可以假设输入的字符串将只包含字母。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入: [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]</span><br><span class="line">输出: [&quot;Alaska&quot;, &quot;Dad&quot;]</span><br></pre></td></tr></table></figure><h4 id="答案一-3"><a href="#答案一-3" class="headerlink" title="答案一"></a>答案一</h4><p>分析: 定好map对应关系 两层遍历就可以,可以先取到首字母的指然后判断是否跟首字母相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">words</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> alObj = &#123;</span><br><span class="line">        <span class="attr">q</span>: <span class="number">0</span>,<span class="attr">w</span>: <span class="number">0</span>,<span class="attr">e</span>: <span class="number">0</span>,<span class="attr">r</span>: <span class="number">0</span>, <span class="attr">t</span>: <span class="number">0</span>,<span class="attr">y</span>: <span class="number">0</span>,<span class="attr">u</span>: <span class="number">0</span>,<span class="attr">i</span>: <span class="number">0</span>,<span class="attr">q</span>: <span class="number">0</span>,<span class="attr">o</span>: <span class="number">0</span>,<span class="attr">p</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,<span class="attr">s</span>: <span class="number">1</span>,<span class="attr">d</span>: <span class="number">1</span>,<span class="attr">f</span>: <span class="number">1</span>,<span class="attr">g</span>: <span class="number">1</span>,<span class="attr">h</span>: <span class="number">1</span>,<span class="attr">j</span>: <span class="number">1</span>,<span class="attr">k</span>: <span class="number">1</span>,<span class="attr">l</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">2</span>,<span class="attr">x</span>: <span class="number">2</span>,<span class="attr">c</span>: <span class="number">2</span>,<span class="attr">v</span>: <span class="number">2</span>,<span class="attr">b</span>: <span class="number">2</span>,<span class="attr">n</span>: <span class="number">2</span>,<span class="attr">m</span>: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> lWords = words.map(<span class="function"><span class="params">val</span> =&gt;</span> val.toLowerCase());</span><br><span class="line">    <span class="keyword">let</span> leng = lWords.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    </span><br><span class="line">    lWords.forEach(<span class="function">(<span class="params">str, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;    </span><br><span class="line">        <span class="keyword">let</span> first =  alObj[str.charAt(<span class="number">0</span>)];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = alObj[str.charAt(i)];</span><br><span class="line">            <span class="keyword">if</span>(first !== current) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            result.push(words[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-2"><a href="#答案二-2" class="headerlink" title="答案二"></a>答案二</h4><p>正则表达式匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[qwertyuiop]&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[asdfghjkl]&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> reg3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[zxcvbnm]&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    words.forEach(<span class="function"><span class="params">word</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> flag1 = reg1.test(word);</span><br><span class="line">        <span class="keyword">let</span> flag2 = reg2.test(word);</span><br><span class="line">        <span class="keyword">let</span> flag3 = reg3.test(word);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((flag1 &amp;&amp; !flag2 &amp;&amp; !flag3)||(!flag1 &amp;&amp; !flag2 &amp;&amp; flag3)||(!flag1 &amp;&amp; flag2 &amp;&amp; !flag3))&#123;</span><br><span class="line">            result.push(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案三"><a href="#答案三" class="headerlink" title="答案三"></a>答案三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findWords(String[] workds) &#123;</span><br><span class="line">        <span class="keyword">if</span>(words == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String[] lines = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">            <span class="string">&quot;qwertyuiop&quot;</span>,</span><br><span class="line">            <span class="string">&quot;asdfghjkl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;zxcvbnm&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String word: words) &#123;</span><br><span class="line">            <span class="keyword">if</span>(judge(word.toLowerCase(), lines)) &#123;</span><br><span class="line">                ans.add(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> String[ans.size()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(String word, String[] lines)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ok = <span class="keyword">true</span>;</span><br><span class="line">        String find = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String line: lines) &#123;</span><br><span class="line">            <span class="keyword">if</span>(line.indexOf(word.charAt(<span class="number">0</span>)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                find = line;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(find == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ok;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(ini i = <span class="number">1</span>; i &lt; word.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(find.indexOf(word.charAt(i)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ok = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-猜数字"><a href="#5-猜数字" class="headerlink" title="5.猜数字"></a>5.猜数字</h3><p><a href="https://leetcode-cn.com/problems/guess-numbers/">猜数字</a>:<br>小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？<br>输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。</p><p>限制：</p><ul><li>guess的长度 = 3</li><li>answer的长度 = 3</li><li>guess的元素取值为 {1, 2, 3} 之一。</li><li>answer的元素取值为 {1, 2, 3} 之一。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：guess = [1,2,3], answer = [1,2,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：小A 每次都猜对了。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：guess = [2,2,3], answer = [3,2,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：小A 只猜对了第二次。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-4"><a href="#答案一-4" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">guess</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">answer</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> game = <span class="function"><span class="keyword">function</span>(<span class="params">guess, answer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> guess.filter(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val === answer[key];</span><br><span class="line">    &#125;).length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案二-3"><a href="#答案二-3" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">game</span><span class="params">(<span class="keyword">int</span>[] guess, <span class="keyword">int</span>[] answer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(guess[i] == answer[i]) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-删列造序"><a href="#6-删列造序" class="headerlink" title="6.删列造序"></a>6.删列造序</h3><p><a href="https://leetcode-cn.com/problems/delete-columns-to-make-sorted/">删列造序</a>:<br>给定由 N 个小写字母字符串组成的数组 A，其中每个字符串长度相等。</p><p>删除 操作的定义是：选出一组要删掉的列，删去 A 中对应列中的所有字符，形式上，第 n 列为 [A[0][n], A[1][n], …, A[A.length-1][n]]）。</p><p>比如，有 A = [“abcdef”, “uvwxyz”]，<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/944_1.png" loading="lazy"><br>要删掉的列为 {0, 2, 3}，删除后 A 为[“bef”, “vyz”]， A 的列分别为[“b”,”v”], [“e”,”y”], [“f”,”z”]。<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/944_2.png" loading="lazy"><br>你需要选出一组要删掉的列 D，对 A 执行删除操作，使 A 中剩余的每一列都是 非降序 排列的，然后请你返回 D.length 的最小可能值。</p><p>提示：</p><ul><li>1 &lt;= A.length &lt;= 100</li><li>1 &lt;= A[i].length &lt;= 1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[&quot;cba&quot;, &quot;daf&quot;, &quot;ghi&quot;]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">当选择 D = &#123;1&#125;，删除后 A 的列为：[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] 和 [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]，均为非降序排列。</span><br><span class="line">若选择 D = &#123;&#125;，那么 A 的列 [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] 就不是非降序排列了。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">输出：0</span><br><span class="line">解释：D = &#123;&#125;</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：[&quot;zyx&quot;, &quot;wvu&quot;, &quot;tsr&quot;]</span><br><span class="line">输出：3</span><br><span class="line">解释：D = &#123;0, 1, 2&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-5"><a href="#答案一-5" class="headerlink" title="答案一"></a>答案一</h4><p>分析: 按照题意来说只要满足每一列的字母 b &gt; a 就需要将结果加一.这里使用<code>charCodeAt()</code>比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minDeletionSize = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = A.length;</span><br><span class="line">    <span class="keyword">let</span> leng = A[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; leng; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123; </span><br><span class="line">            <span class="keyword">let</span> prev = A[i].charCodeAt(j);</span><br><span class="line">            <span class="keyword">let</span> next = A[i+<span class="number">1</span>].charCodeAt(j);</span><br><span class="line">            <span class="keyword">if</span>(prev &gt; next) &#123;</span><br><span class="line">                result++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-4"><a href="#答案二-4" class="headerlink" title="答案二"></a>答案二</h4><p>跟js解法是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDeletionSize</span><span class="params">(String[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; A[<span class="number">0</span>].length(); ++c)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; A.length - <span class="number">1</span>; ++r)</span><br><span class="line">                <span class="keyword">if</span> (A[r].charAt(c) &gt; A[r+<span class="number">1</span>].charAt(c)) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-N叉树的最大深度"><a href="#7-N叉树的最大深度" class="headerlink" title="7.N叉树的最大深度"></a>7.N叉树的最大深度</h3><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/"> N叉树的最大深度</a>:<br>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p><p>例如,给定一个<code>3叉树</code> :<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/narytree.png" loading="lazy"></p><p>我们应返回最大深度,3.</p><p>说明:</p><ul><li>树的深度不会超过 1000。</li><li>树的节点总不会超过 5000。</li></ul><h4 id="答案一-6"><a href="#答案一-6" class="headerlink" title="答案一"></a>答案一</h4><p>因为java和JavaScript的解法一样这里我就算做一种.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val,children) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val;</span></span><br><span class="line"><span class="comment"> *    this.children = children;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.children &amp;&amp; root.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = root.children.length; i&lt; len; i++) &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(maxDepth(root.children[i]), max)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDeepth</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); i++) &#123;</span><br><span class="line">            max = Math.max(maxDeepth(root.children.get(i)), max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-超过经理收入的员工"><a href="#8-超过经理收入的员工" class="headerlink" title="8. 超过经理收入的员工"></a>8. 超过经理收入的员工</h3><p><a href="https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/">超过经理收入的员工</a>:<br>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><p>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><h4 id="答案一-7"><a href="#答案一-7" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    a.Name AS Employee</span><br><span class="line">FROM Employee AS a,</span><br><span class="line">     Employee AS b</span><br><span class="line">WHERE </span><br><span class="line">    a.ManagerId = b.Id</span><br><span class="line">    AND a.Salary &gt; b.Salary</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    a.Name AS Employee</span><br><span class="line">FROM </span><br><span class="line">    Employee AS a </span><br><span class="line">JOIN </span><br><span class="line">    Employee AS b</span><br><span class="line">ON a.ManagerId = b.Id</span><br><span class="line">    AND a.Salary &gt; b.Salary</span><br></pre></td></tr></table></figure><h3 id="9-最小差值-I"><a href="#9-最小差值-I" class="headerlink" title="9.最小差值 I"></a>9.最小差值 I</h3><p><a href="https://leetcode-cn.com/problems/smallest-range-i/">最小差值 I</a><br>给定一个整数数组 A，对于每个整数 A[i]，我们可以选择任意 x 满足 -K &lt;= x &lt;= K，并将 x 加到 A[i] 中。</p><p>在此过程之后，我们得到一些数组 B。</p><p>返回 B 的最大值和 B 的最小值之间可能存在的最小差值。</p><p>提示：</p><ul><li>1 &lt;= A.length &lt;= 10000</li><li>0 &lt;= A[i] &lt;= 10000</li><li>0 &lt;= K &lt;= 10000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：A = [1], K = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：B = [1]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：A = [0,10], K = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：B = [2,8]</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：A = [1,3,6], K = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：B = [3,3,3] 或 B = [4,4,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-8"><a href="#答案一-8" class="headerlink" title="答案一"></a>答案一</h4><p>分析: 这道题目乍一看不容易理解, 其实是这样的我随机从-K到K之间取值保证数组A的最大和最小值的差值最小,也就是说取得最大的最小值和最小的最大值.<br>那么首先要进行排序从小到大进行排序,然后取出数组A的最小值和最大值,便利K进行求和,再找出其中差值的最小值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> smallestRangeI = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;    </span><br><span class="line">    <span class="comment">// 从小到大排序</span></span><br><span class="line">    A = A.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b));</span><br><span class="line">    <span class="keyword">let</span> len = A.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> Af = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> Al = A[len - <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> M = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = -K; i &lt;= K; i++) &#123;</span><br><span class="line">        M.push([</span><br><span class="line">            Af + i,</span><br><span class="line">            Al + i</span><br><span class="line">        ]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> klen = K - (-K) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> delNum = M[<span class="number">0</span>][<span class="number">1</span>] - M[klen-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> delNum &lt;= <span class="number">0</span> ? <span class="number">0</span> : delNum;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后来看了题解发现本题解的还是不够清晰,这里copy一下题解分析来得到答案二</p><h4 id="答案二-5"><a href="#答案二-5" class="headerlink" title="答案二"></a>答案二</h4><p>假设 A 是原始数组，B 是修改后的数组，我们需要最小化 max(B) - min(B)，也就是分别最小化 max(B) 和最大化 min(B)。</p><p>max(B) 最小可能为 max(A) - K，因为 max(A) 不可能再变得更小。同样，min(B) 最大可能为 min(A) + K。所以结果 max(B) - min(B) 至少为 ans = (max(A) - K) - (min(A) + K)。</p><p>我们可以用一下修改方式获得结果（如果 ans &gt;= 0）：</p><ul><li>如果 A[i]≤min(A)+K，那么 B[i]=min(A)+K</li><li>如果 A[i]≥max(A)−K，那么 B[i]=max(A)−K</li><li>否则 B[i]=A[i]。<br>如果 ans &lt; 0，最终结果会有 ans = 0，同样利用上面的修改方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">smallestRangeI</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        let min = A[<span class="number">0</span>], max = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : A) &#123;</span><br><span class="line">            min = Math.min(min, x);</span><br><span class="line">            max = Math.max(max, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>, max - min - <span class="number">2</span>*K);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-将有序数组转换为二叉搜索树未完成"><a href="#10-将有序数组转换为二叉搜索树未完成" class="headerlink" title="10.将有序数组转换为二叉搜索树未完成"></a>10.将有序数组转换为二叉搜索树<code>未完成</code></h3><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">将有序数组转换为二叉搜索树</a>:<br>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">给定有序数组: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-9"><a href="#答案一-9" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sortedArrayToBST(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        root.left = sortedArrayToBST(nums, start, mid);</span><br><span class="line">        root.right = sortedArrayToBST(nums, mid + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。&lt;/p&gt;
&lt;h3 id=&quot;1-反转字符串中的单词-III&quot;&gt;&lt;a href=&quot;#1-反转字符串中的单词-III&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://sdongzhi.com/categories/LeetCode/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="LeetCode" scheme="https://sdongzhi.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题总结(简单版三)</title>
    <link href="https://sdongzhi.com/2019/09/05/leetcode-three/"/>
    <id>https://sdongzhi.com/2019/09/05/leetcode-three/</id>
    <published>2019-09-05T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。</p><h3 id="1-自除数"><a href="#1-自除数" class="headerlink" title="1.自除数"></a>1.自除数</h3><p><a href="https://leetcode-cn.com/problems/self-dividing-numbers/">自除数</a>：<br>自除数 是指可以被它包含的每一位数除尽的数。<br>例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。<br>还有，自除数不允许包含 0 。<br>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p><p>注意：</p><ul><li>每个输入参数的边界满足 1 &lt;= left &lt;= right &lt;= 10000。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入： </span><br><span class="line">上边界left = 1, 下边界right = 22</span><br><span class="line">输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></table></figure><h4 id="答案一："><a href="#答案一：" class="headerlink" title="答案一："></a>答案一：</h4><p>分析： 关键点就是对数字进行拆分取整数和取余数,我自己的解法代码有点复杂冗余，下面是根据题解的优化方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">left</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">right</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = i;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % (n % <span class="number">10</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                n = <span class="built_in">Math</span>.floor(n / <span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            arr.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-二叉搜索树中的搜索"><a href="#2-二叉搜索树中的搜索" class="headerlink" title="2.二叉搜索树中的搜索"></a>2.二叉搜索树中的搜索</h3><p><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">二叉搜索树中的搜索</a>:<br>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。<br>例如，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定二叉搜索树:</span><br><span class="line"></span><br><span class="line">        4</span><br><span class="line">       / \</span><br><span class="line">      2   7</span><br><span class="line">     / \</span><br><span class="line">    1   3</span><br><span class="line"></span><br><span class="line">和值: 2</span><br><span class="line">你应该返回如下子树:</span><br><span class="line"></span><br><span class="line">      2     </span><br><span class="line">     / \   </span><br><span class="line">    1   3</span><br><span class="line">在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</span><br></pre></td></tr></table></figure><h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchBST = <span class="function"><span class="keyword">function</span>(<span class="params">root, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(root.val &gt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root.val === val) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val == val) &#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root.val &gt; val) &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案三"><a href="#答案三" class="headerlink" title="答案三"></a>答案三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照逻辑递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-N叉树的后序遍历"><a href="#3-N叉树的后序遍历" class="headerlink" title="3.N叉树的后序遍历"></a>3.N叉树的后序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">N叉树的后序遍历</a>:给定一个 N 叉树，返回其节点值的后序遍历。</p><p>例如，给定一个 3叉树 :<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/narytree.png" loading="lazy"><br>返回其后序遍历: [5,6,3,2,4,1].</p><p>说明: 递归法很简单，你可以使用迭代法完成此题吗?</p><h4 id="答案一-1"><a href="#答案一-1" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val,children) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val;</span></span><br><span class="line"><span class="comment"> *    this.children = children;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一种方式：递归</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    recusion(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recusion</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; root.children.length; i++) &#123;</span><br><span class="line">            recusion(root.children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案二-1"><a href="#答案二-1" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种方式：迭代</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorder2 = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">var</span> res = [], arr = [root];</span><br><span class="line">    <span class="keyword">while</span>(arr.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> current = arr.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; current.children.length; i++) &#123;</span><br><span class="line">            arr.push(current.children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.unshift(current.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="答案三-1"><a href="#答案三-1" class="headerlink" title="答案三"></a>答案三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(Node cur: root.children) &#123;</span><br><span class="line">            res.addAll(postorder(cur));</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-N叉树的前序遍历"><a href="#4-N叉树的前序遍历" class="headerlink" title="4.N叉树的前序遍历"></a>4.N叉树的前序遍历</h3><p>例如，给定一个 3叉树 :<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/narytree.png" loading="lazy"><br>返回其前序遍历: [1,3,5,6,2,4]。<br>说明: 递归法很简单，你可以使用迭代法完成此题吗?</p><h4 id="答案一-2"><a href="#答案一-2" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val,children) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val;</span></span><br><span class="line"><span class="comment"> *    this.children = children;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    recusion(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recusion</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; root.children.length; i++) &#123;</span><br><span class="line">            recusion(root.children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-2"><a href="#答案二-2" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        <span class="keyword">for</span>(Node cur: root.children) &#123;</span><br><span class="line">            res.addAll(preorder(cur));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案三-2"><a href="#答案三-2" class="headerlink" title="答案三"></a>答案三</h4><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            Node cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line"></span><br><span class="line">            List&lt;Node&gt; nodeList = cur.children;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = nodeList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                stack.push(nodeList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Nim-游戏"><a href="#5-Nim-游戏" class="headerlink" title="5.Nim 游戏"></a>5.Nim 游戏</h3><p><a href="https://leetcode-cn.com/problems/nim-game/submissions/">Nim 游戏</a>:<br>你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。<br>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: false </span><br><span class="line">解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；</span><br><span class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-3"><a href="#答案一-3" class="headerlink" title="答案一"></a>答案一</h4><p>分析:随机拿1-3块石头，这里的4是一个临界点，依次以，5，6，7，8举例计算，发现每次能被4整除时一定会返回false,其他返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canWinNim = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">4</span> ? <span class="literal">true</span>: <span class="literal">false</span>;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-山脉数组的峰顶索引"><a href="#6-山脉数组的峰顶索引" class="headerlink" title="6.山脉数组的峰顶索引"></a>6.山脉数组的峰顶索引</h3><p><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">山脉数组的峰顶索引</a>:<br>我们把符合下列属性的数组 A 称作山脉：</p><ul><li>A.length &gt;= 3</li><li>存在 0 &lt; i &lt; A.length - 1 使得A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]</li></ul><p>给定一个确定为山脉的数组，返回任何满足 A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1] 的 i 的值。</p><p>提示：</p><ul><li>3 &lt;= A.length &lt;= 10000</li><li>0 &lt;= A[i] &lt;= 10^6</li><li>A 是如上定义的山脉</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[0,1,0]</span><br><span class="line">输出：1</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[0,2,1,0]</span><br><span class="line">输出：1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-4"><a href="#答案一-4" class="headerlink" title="答案一"></a>答案一</h4><p>分析：通过读题其实是返回数组中最大值的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> peakIndexInMountainArray = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.findIndex(<span class="function"><span class="params">val</span> =&gt;</span> val == <span class="built_in">Math</span>.max(...A));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-3"><a href="#答案二-3" class="headerlink" title="答案二"></a>答案二</h4><p>后台的解题方法更多可以参考一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打桩法，也叫单向扫描，代码如下：时间复杂度为O(n)，效率略低，但是此方法具有普适性，也就是说这个方法可适用于在一般数组中找最大值。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="keyword">null</span> || A,length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; max) &#123;</span><br><span class="line">                max = A[i];</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双指针，也叫双向扫描，左右两边同时向中间扫描，以找出最大值，这个算法其实是在打桩法之上的一个效率优化，</span></span><br><span class="line"><span class="comment">// 时间复杂度为O(n/2)---&gt;O(n)，效率较低，但比打桩法效率高，同时也具有普适性。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="keyword">null</span> || A,length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = A.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(left &lt;= right &amp;&amp; A[left] &gt; max) &#123;</span><br><span class="line">                max = A[left];</span><br><span class="line">                ans = left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left &lt;= right &amp;&amp; A[right] &gt; max) &#123;</span><br><span class="line">                max = A[right];</span><br><span class="line">                ans = right;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治法，二分查找，是适用于此题的最佳解法，时间复杂度为O(logn)，优点是效率高，缺点是不具有普适性。因为此题数组特殊，所以可用这种方法提高查找效率。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length &lt; <span class="number">3</span>)  &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = A.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[center] &gt; A[center - <span class="number">1</span>] &amp;&amp; A[center] &gt; A[center + <span class="number">1</span>]) &#123;</span><br><span class="line">                ans = center;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(A[center] &lt; A[center - <span class="number">1</span>]) &#123;</span><br><span class="line">                right = center;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = center;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-除数博弈"><a href="#7-除数博弈" class="headerlink" title="7.除数博弈"></a>7.除数博弈</h3><p><a href="https://leetcode-cn.com/problems/divisor-game/">除数博弈</a>:<br>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。<br>最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：</p><ul><li>选出任一 x，满足 0 &lt; x &lt; N 且 N % x == 0 。</li><li>用 N - x 替换黑板上的数字 N 。</li></ul><p>如果玩家无法执行这些操作，就会输掉游戏。<br>只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。</p><p>提示： 1 &lt;= N &lt;= 1000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：2</span><br><span class="line">输出：true</span><br><span class="line">解释：爱丽丝选择 1，鲍勃无法进行操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：3</span><br><span class="line">输出：false</span><br><span class="line">解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-5"><a href="#答案一-5" class="headerlink" title="答案一"></a>答案一</h4><p>分析：自己按照题解给出的答案。但是有更简单的解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">N</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> divisorGame = <span class="function"><span class="keyword">function</span>(<span class="params">N</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">let</span> x = finx(N);</span><br><span class="line">    <span class="keyword">let</span> oN = N;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        oN = oN - x;</span><br><span class="line">        x = finx(oN);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&amp;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">finx</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num % i === <span class="number">0</span>) &#123;</span><br><span class="line">                x = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-4"><a href="#答案二-4" class="headerlink" title="答案二"></a>答案二</h4><p>对于这种博弈类的题目，如果没有思路的话我们不妨多举几个例子，尝试着从中找寻规律。</p><ul><li>假设 N = 1，爱丽丝没得选择，直接失败，即 鲍勃获胜；</li><li>假设 N = 2，爱丽丝有选择，她可以选择 x = 1，鲍勃面对的就是 N = 2 - 1 = 1，无法操作，爱丽丝获胜；</li><li>假设 N = 3，爱丽丝只能选择 x = 1，因为选 x = 2 不满足 3 % 2 = 0，鲍勃面对的就是 N = 3 - 1 = 2，参考上面 N = 2 的情形，此时鲍勃为 N = 2 的先手，鲍勃获胜；</li><li>假设 N = 4，爱丽丝可以选择 x = 1 来使鲍勃遇到 N = 3 的情况，爱丽丝获胜；<br>貌似有个规律：N 为奇数时， 鲍勃获胜；N 为偶数时， 爱丽丝获胜。</li></ul><p>是这样吗？是的。</p><p>事实上，无论 N 为多大，最终都是在 N = 2 这个临界点结束的。谁最后面对的是 N = 2 的情形，谁就能获胜（这句话不太理解的话，仔细看看 N = 2、N = 3 这两种情形）。<br>接下来，我们得知道一个数学小知识：奇数的因子（约数）只能是奇数，偶数的因子（约数）可以是奇数或偶数。<br>千万不要忽略 1 也是因子！</p><p>爱丽丝是游戏开始时的先手。</p><p>当她面对的 N 为偶数时，她 一定可以 选到一个 N 的奇数因子 x（比如 1 ），将 N - x 这个奇数传给鲍勃；用 N - x 替换黑板上的数字 N ，鲍勃面对的就是奇数 N，只能选择 N 的奇数因子 x，奇数 - 奇数 = 偶数，此时传给爱丽丝的又是偶数。这样轮换下去爱丽丝会遇到 N = 2 的情形，然后获胜；<br>当爱丽丝遇到的 N 是奇数时，只能传给鲍勃偶数或无法操作 (N = 1) ，无法获胜。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">divisorGame</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-最近的请求次数-代码比题目易懂"><a href="#8-最近的请求次数-代码比题目易懂" class="headerlink" title="8.最近的请求次数(代码比题目易懂)"></a>8.最近的请求次数(代码比题目易懂)</h3><p><a href="https://leetcode-cn.com/problems/number-of-recent-calls/">最近的请求次数</a>:<br>写一个 <code>RecentCounter</code> 类来计算最近的请求。<br>它只有一个方法：<code>ping(int t)</code>，其中 t 代表以毫秒为单位的某个时间。<br>返回从 <code>3000</code> 毫秒前到现在的 <code>ping</code> 数。<br>任何处于 <code>[t - 3000, t]</code> 时间范围之内的 <code>ping</code> 都将会被计算在内，包括当前（指 t 时刻）的 <code>ping</code>。<br>保证每次对 <code>ping</code> 的调用都使用比之前更大的 t 值。</p><p>提示：</p><ul><li>每个测试用例最多调用 10000 次 ping。</li><li>每个测试用例会使用严格递增的 t 值来调用 ping。</li><li>每次调用 ping 都有 1 &lt;= t &lt;= 10^9。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：inputs = [&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;], inputs = [[],[1],[100],[3001],[3002]]</span><br><span class="line">输出：[null,1,2,3,3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> </p><h4 id="答案一-6"><a href="#答案一-6" class="headerlink" title="答案一"></a>答案一</h4><p>分析：说实话这道题目不容易理解，配上示例也完全不知道在说啥，先看一下题解进行一下分析，题目其实是这样的<br>示例解读：分别在1,100,3001,3002ms发出了请求（ping）</p><p>1ms时计算1ms以及1ms之前3000ms的请求数为‘1’(1ms时的ping)</p><p>100ms时计算100ms以及100ms之前3000s的请求数为‘2’（1ms时的ping和100ms时的ping）</p><p>3001ms时计算3001ms以及3001ms之前3000s的请求数为‘3’(1ms时的ping、100ms时的ping和3001ms时的ping)</p><p>3002ms时计算3002ms以及3002ms之前3000s的请求数为‘3’(100ms时的ping、3001ms时的ping和3002ms时的ping)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RecentCounter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.result = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RecentCounter.prototype.ping = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.result.push(t);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">this</span>.result[<span class="number">0</span>] &lt; (t - <span class="number">3000</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.result.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.result.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new RecentCounter()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.ping(t)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="答案二-5"><a href="#答案二-5" class="headerlink" title="答案二"></a>答案二</h4><p>官方题解：我们只会考虑最近 3000 毫秒到现在的 ping 数，因此我们可以使用队列存储这些 ping 的记录。当收到一个时间 t 的 ping 时，我们将它加入队列，并且将所有在时间 t - 3000 之前的 ping 移出队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentCounter</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecentCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        q = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ping</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        q.add(t);</span><br><span class="line">        <span class="keyword">while</span>(q.peek() &lt; t - <span class="number">3000</span>) &#123;</span><br><span class="line">            q.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-数字的补数"><a href="#9-数字的补数" class="headerlink" title="9.数字的补数"></a>9.数字的补数</h3><p><a href="https://leetcode-cn.com/problems/number-complement/">数字的补数</a>:<br>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p><p>注意:</p><ul><li>给定的整数保证在32位带符号整数的范围内。</li><li>你可以假定二进制数不包含前导零位。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 5</span><br><span class="line">输出: 2</span><br><span class="line">解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 1</span><br><span class="line">输出: 0</span><br><span class="line">解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-7"><a href="#答案一-7" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = num.toString(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">      res += (<span class="built_in">Number</span>(b.charAt(i))^<span class="number">1</span> + <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(res, <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="10-按奇偶排序数组"><a href="#10-按奇偶排序数组" class="headerlink" title="10.按奇偶排序数组"></a>10.按奇偶排序数组</h3><p><a href="https://leetcode-cn.com/problems/sort-array-by-parity/submissions/">按奇偶排序数组</a>:<br>给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。<br>你可以返回满足此条件的任何数组作为答案。</p><p>提示：</p><ul><li><code>1 <= A.length <= 5000</code></li><li><code>0 <= A[i] <= 5000</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：[3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。</span><br></pre></td></tr></table></figure><h4 id="答案一-8"><a href="#答案一-8" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArrayByParity = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> A.filter(<span class="function"><span class="params">val</span> =&gt;</span> val % <span class="number">2</span> == <span class="number">0</span>).concat(A.filter(<span class="function"><span class="params">val</span> =&gt;</span> val % <span class="number">2</span> !== <span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-6"><a href="#答案二-6" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArrayByParity(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>, max = A.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : A) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                res[min++] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[max--] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。&lt;/p&gt;
&lt;h3 id=&quot;1-自除数&quot;&gt;&lt;a href=&quot;#1-自除数&quot; class=&quot;headerlink&quot; title=&quot;1.自除数&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://sdongzhi.com/categories/LeetCode/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="LeetCode" scheme="https://sdongzhi.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题总结(简单版二)</title>
    <link href="https://sdongzhi.com/2019/09/04/leetcode-two/"/>
    <id>https://sdongzhi.com/2019/09/04/leetcode-two/</id>
    <published>2019-09-04T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。</p><h3 id="1-有趣的电影"><a href="#1-有趣的电影" class="headerlink" title="1.有趣的电影"></a>1.有趣的电影</h3><p><a href="https://leetcode-cn.com/problems/not-boring-movies/">有趣的电影</a>：<br>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。<br>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例如，下表 cinema:</span><br><span class="line"></span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">对于上面的例子，则正确的输出是为：</span><br><span class="line"></span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一："><a href="#答案一：" class="headerlink" title="答案一："></a>答案一：</h4><p>我们可以使用 mod(id,2)=1 来确定奇数 id，然后添加 description != ‘boring’ 来解决问题。<br>官方题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from cinema</span><br><span class="line">where mod(id,2) != 0 and description != &#x27;boring&#x27;</span><br><span class="line">order by rating desc</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h4 id="答案二："><a href="#答案二：" class="headerlink" title="答案二："></a>答案二：</h4><p>如何确定奇数除了使用mod函数还有一个比较巧妙的方法， id&amp;1按位与,该操作会将数字转为32位的二进制进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id=1</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> 结果为<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//id=2</span></span><br><span class="line"><span class="number">0010</span></span><br><span class="line"><span class="number">0001</span> </span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> 结果为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//id=3</span></span><br><span class="line"><span class="number">0011</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> 结果为<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//id=4</span></span><br><span class="line"><span class="number">0010</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> 结果为<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为1的前31位都是0，跟0进行与操作肯定是0，主要在于最后一位如果是奇数肯定能得到1，如果是0肯定是0<br>所以答案也可以写成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from cinema </span><br><span class="line">where description&lt;&gt;&#x27;boring&#x27; and id&amp;1 </span><br><span class="line">order by rating desc</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="2-汉明距离"><a href="#2-汉明距离" class="headerlink" title="2.汉明距离"></a>2.汉明距离</h3><p><a href="https://leetcode-cn.com/problems/hamming-distance/">汉明距离</a>:<br>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。<br>给出两个整数 x 和 y，计算它们之间的汉明距离。<br>注意：<br>0 ≤ x, y &lt; 231.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: x = 1, y = 4</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">上面的箭头指出了对应二进制位不同的位置。</span><br></pre></td></tr></table></figure><h4 id="答案一：-1"><a href="#答案一：-1" class="headerlink" title="答案一："></a>答案一：</h4><p>分析其实本题的意图就是将x，y转为二进制后，记录对应位置值不相同的位置数量， 所以我们就想到了按位异或。x^y后得到一个数值，需要将这个值转为二进制再去统计数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @param &#123;number&#125; y</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var hammingDistance = function(x, y) &#123;</span><br><span class="line">  let z = x^y;</span><br><span class="line">  let num = 0;</span><br><span class="line">  let bin = z.toString(2);</span><br><span class="line">  for(let i = 0; i &lt; bin.length; i++) &#123;</span><br><span class="line">      if(bin.charAt(i) === &#x27;1&#x27;) &#123;</span><br><span class="line">          num++;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    return num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-翻转二叉树"><a href="#3-翻转二叉树" class="headerlink" title="3.翻转二叉树"></a>3.翻转二叉树</h3><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a>:<br>翻转一棵二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        TreeNode right = invertTree(root.right);</span><br><span class="line">        TreeNode left = invertTree(root.left);</span><br><span class="line">        </span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root !== <span class="literal">null</span>) &#123;</span><br><span class="line">        [root.left, root.right] = [invertTree(root.right), invertTree(root.left)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-机器人能否返回原点"><a href="#4-机器人能否返回原点" class="headerlink" title="4.机器人能否返回原点"></a>4.机器人能否返回原点</h3><p><a href="https://leetcode-cn.com/problems/robot-return-to-origin/">机器人能否返回原点</a>：<br>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。<br>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。<br>注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;UD&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;LL&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。</span><br></pre></td></tr></table></figure><h4 id="答案一-1"><a href="#答案一-1" class="headerlink" title="答案一"></a>答案一</h4><p>分析：是否回到原点，取决于上下移动的步数相等，左右移动的步数相等。<br>所以最简单的方法就是去计数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">moves</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> judgeCircle = <span class="function"><span class="keyword">function</span>(<span class="params">moves</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> movesArr = moves.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        movesArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val === <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">                u++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(val === <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                d++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(val === <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(val === <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> u === d &amp;&amp; r === l;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-1"><a href="#答案二-1" class="headerlink" title="答案二"></a>答案二</h4><p>比第一个方法要巧妙一些，不去计数了但是还是要判断步数相等，通过切割关键点来得到数组，如果关键点数量一样数组的长度相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">moves</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> judgeCircle = <span class="function"><span class="keyword">function</span>(<span class="params">moves</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moves.split(<span class="string">&#x27;L&#x27;</span>).length === moves.split(<span class="string">&#x27;R&#x27;</span>).length &amp;&amp; moves.split(<span class="string">&#x27;U&#x27;</span>).length === moves.split(<span class="string">&#x27;D&#x27;</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-高度检查器"><a href="#5-高度检查器" class="headerlink" title="5.高度检查器"></a>5.高度检查器</h3><p><a href="https://leetcode-cn.com/problems/height-checker/">高度检查器</a>:<br>学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。<br>请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。</p><p>提示：</p><ul><li>1 &lt;= heights.length &lt;= 100</li><li>1 &lt;= heights[i] &lt;= 100</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：[1,1,4,2,1,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。</span><br></pre></td></tr></table></figure><h4 id="答案一-2"><a href="#答案一-2" class="headerlink" title="答案一"></a>答案一</h4><p>分析：将数组重新排序后得到新的数组去判断同一个位置的值是否相等，不想等计数+1.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">heights</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> heightChecker = <span class="function"><span class="keyword">function</span>(<span class="params">heights</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> temp = heights.concat().sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b) );</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(heights[i] != temp[i]) &#123;</span><br><span class="line">            count++;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-二叉树的最大深度"><a href="#6-二叉树的最大深度" class="headerlink" title="6.二叉树的最大深度"></a>6.二叉树的最大深度</h3><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a>:<br>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br>说明: 叶子节点是指没有子节点的节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7]，</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">返回它的最大深度 3 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-3"><a href="#答案一-3" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> left = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">let</span> right = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-交换工资"><a href="#7-交换工资" class="headerlink" title="7.交换工资"></a>7.交换工资</h3><p><a href="https://leetcode-cn.com/problems/swap-salary/">交换工资</a><br>给定一个 salary 表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。<br>注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br><span class="line">运行你所编写的更新语句之后，将会得到以下表:</span><br><span class="line"></span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-4"><a href="#答案一-4" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE salary </span><br><span class="line">SET sex = CASE sex</span><br><span class="line">        WHEN &#x27;m&#x27; THEN &#x27;f&#x27;</span><br><span class="line">        ELSE &#x27;m&#x27;</span><br><span class="line">    END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-有序数组的平方"><a href="#8-有序数组的平方" class="headerlink" title="8.有序数组的平方"></a>8.有序数组的平方</h3><p><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">有序数组的平方</a>:<br>给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。</p><p>提示：</p><ul><li>1 &lt;= A.length &lt;= 10000</li><li>-10000 &lt;= A[i] &lt;= 10000</li><li>A 已按非递减顺序排序。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-5"><a href="#答案一-5" class="headerlink" title="答案一"></a>答案一</h4><p>分析：因为是从小打大，其中可以包含负数，所以取平方后两头应该最大。之所以使用<code>unshift</code>是因为双向指针来获取，拿到的一开始的值肯定是最大的后面越来越小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = A.length;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = count -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="built_in">Math</span>.pow(A[i], <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> right = <span class="built_in">Math</span>.pow(A[j], <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line">            result.unshift(left);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.unshift(right);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-增减字符串匹配"><a href="#9-增减字符串匹配" class="headerlink" title="9.增减字符串匹配"></a>9.增减字符串匹配</h3><p><a href="https://leetcode-cn.com/problems/di-string-match/">增减字符串匹配</a>:<br>给定只含 “I”（增大）或 “D”（减小）的字符串 S ，令 N = S.length。<br>返回 [0, 1, …, N] 的任意排列 A 使得对于所有 i = 0, …, N-1，都有：<br>如果 S[i] == “I”，那么 A[i] &lt; A[i+1]<br>如果 S[i] == “D”，那么 A[i] &gt; A[i+1]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输出：<span class="string">&quot;IDID&quot;</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输出：<span class="string">&quot;III&quot;</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输出：<span class="string">&quot;DDI&quot;</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-6"><a href="#答案一-6" class="headerlink" title="答案一"></a>答案一</h4><p>分析：根据结果的分析是所有的I从0开始依次递增，所有D从N开始依次递减</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diStringMatch = <span class="function"><span class="keyword">function</span>(<span class="params">S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = S.length;</span><br><span class="line">    <span class="keyword">let</span> imin = <span class="number">0</span>, dmax = len;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(S.charAt(i) === <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            result[i] = imin;</span><br><span class="line">            imin++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = dmax;</span><br><span class="line">            dmax--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-2"><a href="#答案二-2" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分析：乍一看这个一行的解法不是特别明白，但是分析示例答案可以看出无论给出的字符串是什么样的最后都可以补充一位，可以补I也可以补D,对于结果是没有影响的</span><br><span class="line">所以先不补位置。然后逢I加一 逢D减一。</span><br><span class="line"><span class="keyword">var</span> diStringMatch = <span class="function"><span class="keyword">function</span>(<span class="params">S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span>,b = S.length;</span><br><span class="line">    <span class="keyword">return</span> (S+S[S.length - <span class="number">1</span>]).split(<span class="string">&#x27;&#x27;</span>).map(<span class="function">(<span class="params">x</span>) =&gt;</span> x==<span class="string">&#x27;I&#x27;</span>?a++:b--)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-组合两个表"><a href="#10-组合两个表" class="headerlink" title="10.组合两个表"></a>10.组合两个表</h3><p><a href="https://leetcode-cn.com/problems/combine-two-tables/">组合两个表</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">表1: Person</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">PersonId 是上表主键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表2: Address</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">AddressId 是上表主键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</span><br><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure><h4 id="答案一-7"><a href="#答案一-7" class="headerlink" title="答案一"></a>答案一</h4><p>因为表 Address 中的 personId 是表 Person 的外关键字，所以我们可以连接这两个表来获取一个人的地址信息。<br>考虑到可能不是每个人都有地址信息，我们应该使用 outer join 而不是默认的 inner join。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select FirstName, LastName, City, State</span><br><span class="line">from Person left join Address</span><br><span class="line">on Person.PersonId = Address.PersonId</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。&lt;/p&gt;
&lt;h3 id=&quot;1-有趣的电影&quot;&gt;&lt;a href=&quot;#1-有趣的电影&quot; class=&quot;headerlink&quot; title=&quot;1.有趣的电影&quot;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://sdongzhi.com/categories/LeetCode/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="LeetCode" scheme="https://sdongzhi.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题总结(简单版一)</title>
    <link href="https://sdongzhi.com/2019/09/03/leetcode-one/"/>
    <id>https://sdongzhi.com/2019/09/03/leetcode-one/</id>
    <published>2019-09-03T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。</p><h3 id="1-宝石与石头"><a href="#1-宝石与石头" class="headerlink" title="1.宝石与石头"></a>1.宝石与石头</h3><p><a href="https://leetcode-cn.com/problems/jewels-and-stones/">宝石与石头</a>：<br>给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。<br>J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例1:</span><br><span class="line">输入: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">示例1:</span><br><span class="line">输入: J = &quot;z&quot;, S = &quot;ZZ&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p>注意:<br>S 和 J 最多含有50个字母。<br>J 中的字符不重复。</p><h4 id="答案一："><a href="#答案一：" class="headerlink" title="答案一："></a>答案一：</h4><p>分析：最笨的方法肯定是双层遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">J</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numJewelsInStones = <span class="function"><span class="keyword">function</span>(<span class="params">J, S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jLen = J.length;</span><br><span class="line">    <span class="keyword">var</span> sLen = S.length;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jLen; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> j = J.charAt(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; sLen; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j === S.charAt(k)) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二："><a href="#答案二：" class="headerlink" title="答案二："></a>答案二：</h4><p>通过题解得到了另一种思路就是将J进行循环遍历然后将S中的匹配值全部替换为空，这样长度的差值就是宝石的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; J</span><br><span class="line"> * @param &#123;string&#125; S</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var numJewelsInStones = function(J, S) &#123;</span><br><span class="line">    var jLen = J.length,</span><br><span class="line">        sLen = S.length;</span><br><span class="line">        var news= S;</span><br><span class="line">    for(var i = 0; i &lt; jLen; i++) &#123;</span><br><span class="line">        news = news.replace(new RegExp(J.charAt(i), &#x27;g&#x27;), &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return sLen - news.length;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-IP地址无效化"><a href="#2-IP地址无效化" class="headerlink" title="2.IP地址无效化"></a>2.IP地址无效化</h3><p><a href="https://leetcode-cn.com/problems/defanging-an-ip-address/">IP地址无效化</a>：<br>给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。<br>所谓无效化 IP 地址，其实就是用 “[.]” 代替了每个 “.”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例1:</span><br><span class="line">输入：address = &quot;1.1.1.1&quot;</span><br><span class="line">输出：&quot;1[.]1[.]1[.]1&quot;</span><br><span class="line"></span><br><span class="line">示例2:</span><br><span class="line">输入：address = &quot;255.100.50.0&quot;</span><br><span class="line">输出：&quot;255[.]100[.]50[.]0&quot;</span><br></pre></td></tr></table></figure><h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><p>分析：最简单直接的方案就是正则表达式替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; address</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">var defangIPaddr = function(address) &#123;</span><br><span class="line">    return address.replace(/\./g, &#x27;[.]&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-删除链表中的节点"><a href="#3-删除链表中的节点" class="headerlink" title="3.删除链表中的节点"></a>3.删除链表中的节点</h3><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">删除链表中的节点</a>:<br>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。<br>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/237_example.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例1</span><br><span class="line">输入: head = [4,5,1,9], node = 5</span><br><span class="line">输出: [4,1,9]</span><br><span class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br><span class="line"></span><br><span class="line">示例2</span><br><span class="line">输入: head = [4,5,1,9], node = 1</span><br><span class="line">输出: [4,5,9]</span><br><span class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><h4 id="答案一-1"><a href="#答案一-1" class="headerlink" title="答案一"></a>答案一</h4><p>分析：说实话这道题目对于前端的同学来说其实很难理解。但是对于后台同学这个就太简单了，首先要理解<a href="https://blog.csdn.net/jianyuerensheng/article/details/51200274">单向链表的概念</a>。对于本题只需要将删除后的节点指向新节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4><p>对于使用javascript的版本需要首先定义一个单向链表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; node</span><br><span class="line"> * @return &#123;void&#125; Do not return anything, modify node in-place instead.</span><br><span class="line"> */</span><br><span class="line">var deleteNode = function(node) &#123;</span><br><span class="line">  node.val = node.next.val;</span><br><span class="line">  node.next = node.next.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var deleteNode = function(node) &#123;</span><br><span class="line">  node = Object.assign(node, node.next)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-查找重复的电子邮箱"><a href="#4-查找重复的电子邮箱" class="headerlink" title="4.查找重复的电子邮箱"></a>4.查找重复的电子邮箱</h3><p><a href="https://leetcode-cn.com/problems/duplicate-emails/">查找重复的电子邮箱</a>: 编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><h4 id="答案一-2"><a href="#答案一-2" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Email</span><br><span class="line">from Person</span><br><span class="line">group by Email</span><br><span class="line">having count(Email) &gt; 1</span><br></pre></td></tr></table></figure><h4 id="答案二-1"><a href="#答案二-1" class="headerlink" title="答案二"></a>答案二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select Email from</span><br><span class="line">(</span><br><span class="line">    select Email, count(Email) as num</span><br><span class="line">    from Person</span><br><span class="line">    group by Email</span><br><span class="line">) as statistic</span><br><span class="line">where num &gt; 1;</span><br></pre></td></tr></table></figure><h3 id="5-大的国家"><a href="#5-大的国家" class="headerlink" title="5.大的国家"></a>5.大的国家</h3><p><a href="https://leetcode-cn.com/problems/big-countries/">大的国家</a>:这里有张 World 表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br></pre></td></tr></table></figure><p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p><p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>例如，根据上表，我们应该输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+--------------+-------------+--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-3"><a href="#答案一-3" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, population, area </span><br><span class="line">FROM world </span><br><span class="line">WHERE area &gt; 3000000</span><br><span class="line">UNION</span><br><span class="line">SELECT name, population, area </span><br><span class="line">FROM world </span><br><span class="line">WHERE population &gt; 25000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT name, population, area </span><br><span class="line">FROM world </span><br><span class="line">WHERE area &gt; 3000000 OR population &gt; 25000000</span><br></pre></td></tr></table></figure><h3 id="6-二叉搜索树的范围和"><a href="#6-二叉搜索树的范围和" class="headerlink" title="6.二叉搜索树的范围和"></a>6.二叉搜索树的范围和</h3><p><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">二叉搜索树的范围和</a>: 给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。<br>二叉搜索树保证具有唯一的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例1:</span><br><span class="line">输入：root = [10,5,15,3,7,null,18], L = 7, R = 15</span><br><span class="line">输出：32</span><br><span class="line"></span><br><span class="line">示例2:</span><br><span class="line">输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><p>提示</p><ul><li>树中的结点数量最多为 10000 个。</li><li>最终的答案保证小于 2^31。</li></ul><h4 id="答案一-4"><a href="#答案一-4" class="headerlink" title="答案一"></a>答案一</h4><p><code>Java官方解法</code><br>要理解这道题首先要知道一个概念<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">二叉查找树</a>, 也称为二叉搜索树、有序二叉树、排序二叉树，指一棵空树或具有以下性质的二叉树：</p><ul><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点。</li></ul><p>深度优先搜索我们对树进行深度优先搜索，对于当前节点 node，如果 node.val 小于等于 L，那么只需要继续搜索它的右子树；如果 node.val 大于等于 R，那么只需要继续搜索它的左子树；如果 node.val 在区间 (L, R) 中，则需要搜索它的所有子树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        dfs(root, L, R);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode node, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (L &lt;= node.val &amp;&amp; node.val &lt;= R)</span><br><span class="line">                ans += node.val;</span><br><span class="line">            <span class="keyword">if</span> (L &lt; node.val)</span><br><span class="line">                dfs(node.left, L, R);</span><br><span class="line">            <span class="keyword">if</span> (node.val &lt; R)</span><br><span class="line">                dfs(node.right, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代实现深度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(L &lt;= node.val &amp;&amp; node.val &lt;= R)</span><br><span class="line">                    ans += node.val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(L &lt; node.val)</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(node.val &lt; R)</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案二-2"><a href="#答案二-2" class="headerlink" title="答案二"></a>答案二</h4><p><code>JavaScript</code>画图解题<br><img src="https://cdn.darknights.cn/assets/images/in-post/leetcode/tree.jpeg" loading="lazy"><br>假设L= 7，R=15 </p><ul><li>如果node.val &gt;= 7 &amp;&amp; node.val &lt;= 15 则直接求和</li><li>如果node.val &gt; 7,则node.right的值都大于7，右侧没有搜索必要，去查找left的值</li><li>如果node.val &lt; 15,则node.left的值都小于15，左侧没有搜索必要，去查找right的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">L</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">R</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rangeSumBST = <span class="function"><span class="keyword">function</span>(<span class="params">root, L, R</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">const</span> dealBinTree = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(L &lt; node.val) &#123;</span><br><span class="line">                    dealBinTree(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.val &gt;= L &amp;&amp; node.val &lt;= R) &#123;</span><br><span class="line">                sum += node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(R &gt; node.val) &#123;</span><br><span class="line">                    dealBinTree(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dealBinTree(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-转换成小写字母"><a href="#7-转换成小写字母" class="headerlink" title="7.转换成小写字母"></a>7.转换成小写字母</h3><p><a href="https://leetcode-cn.com/problems/to-lower-case/">转换成小写字母</a>:实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入: &quot;Hello&quot;</span><br><span class="line">输出: &quot;hello&quot;</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入: &quot;here&quot;</span><br><span class="line">输出: &quot;here&quot;</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入: &quot;LOVELY&quot;</span><br><span class="line">输出: &quot;lovely&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-5"><a href="#答案一-5" class="headerlink" title="答案一"></a>答案一</h4><p>分析通过字符串的 <code>charCodeAt</code>和<code>String.fromCharCode</code>这两个方法来得到答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; str</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">var toLowerCase = function(str) &#123;</span><br><span class="line">    var s = &#x27;&#x27;;</span><br><span class="line">    for(var i = 0, len = str.length; i &lt; len; i++) &#123;</span><br><span class="line">        var c = str.charCodeAt(i);</span><br><span class="line">        if(c &gt;= 65 &amp;&amp; c &lt;= 90) &#123;</span><br><span class="line">           s += String.fromCharCode(c+32); </span><br><span class="line">        &#125;  else &#123;</span><br><span class="line">           s += str.charAt(i);    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-唯一摩尔斯密码词"><a href="#8-唯一摩尔斯密码词" class="headerlink" title="8.唯一摩尔斯密码词"></a>8.唯一摩尔斯密码词</h3><p><a href="https://leetcode-cn.com/problems/unique-morse-code-words/">唯一摩尔斯密码词</a><br>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: “a” 对应 “.-“, “b” 对应 “-…”, “c” 对应 “-.-.”, 等等。<br>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p><p>[“.-“,”-…”,”-.-.”,”-..”,”.”,”..-.”,”–.”,”….”,”..”,”.—“,”-.-“,”.-..”,”–”,”-.”,”—“,”.–.”,”–.-“,”.-.”,”…”,”-“,”..-“,”…-“,”.–”,”-..-“,”-.–”,”–..”]</p><p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，”cab” 可以写成 “-.-..–…”，(即 “-.-.” + “-…” + “.-“字符串的结合)。我们将这样一个连接过程称作单词翻译。</p><p>返回我们可以获得所有词不同单词翻译的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">各单词翻译如下:</span><br><span class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line"></span><br><span class="line">共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>单词列表words 的长度不会超过 100。</li><li>每个单词 words[i]的长度范围为 [1, 12]。</li><li>每个单词 words[i]只包含小写字母。</li></ul><h4 id="答案一-6"><a href="#答案一-6" class="headerlink" title="答案一"></a>答案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">words</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniqueMorseRepresentations = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = [<span class="string">&quot;.-&quot;</span>,<span class="string">&quot;-...&quot;</span>,<span class="string">&quot;-.-.&quot;</span>,<span class="string">&quot;-..&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;..-.&quot;</span>,<span class="string">&quot;--.&quot;</span>,<span class="string">&quot;....&quot;</span>,<span class="string">&quot;..&quot;</span>,<span class="string">&quot;.---&quot;</span>,<span class="string">&quot;-.-&quot;</span>,<span class="string">&quot;.-..&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;---&quot;</span>,<span class="string">&quot;.--.&quot;</span>,<span class="string">&quot;--.-&quot;</span>,<span class="string">&quot;.-.&quot;</span>,<span class="string">&quot;...&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;..-&quot;</span>,<span class="string">&quot;...-&quot;</span>,<span class="string">&quot;.--&quot;</span>,<span class="string">&quot;-..-&quot;</span>,<span class="string">&quot;-.--&quot;</span>,<span class="string">&quot;--..&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = words.length; i &lt; len; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> m = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, jen = words[i].length; j &lt; jen; j++) &#123;</span><br><span class="line">             m += map[words[i].charCodeAt(j) - <span class="number">97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(m)) &#123;</span><br><span class="line">            obj[m] = obj[m] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[m] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-3"><a href="#答案二-3" class="headerlink" title="答案二"></a>答案二</h4><p><code>Java</code>利用Set自动去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        String[] s=&#123;<span class="string">&quot;.-&quot;</span>,<span class="string">&quot;-...&quot;</span>,<span class="string">&quot;-.-.&quot;</span>,<span class="string">&quot;-..&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;..-.&quot;</span>,<span class="string">&quot;--.&quot;</span>,<span class="string">&quot;....&quot;</span>,<span class="string">&quot;..&quot;</span>,<span class="string">&quot;.---&quot;</span>,<span class="string">&quot;-.-&quot;</span>,<span class="string">&quot;.-..&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;---&quot;</span>,<span class="string">&quot;.--.&quot;</span>,<span class="string">&quot;--.-&quot;</span>,<span class="string">&quot;.-.&quot;</span>,<span class="string">&quot;...&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;..-&quot;</span>,<span class="string">&quot;...-&quot;</span>,<span class="string">&quot;.--&quot;</span>,<span class="string">&quot;-..-&quot;</span>,<span class="string">&quot;-.--&quot;</span>,<span class="string">&quot;--..&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            String temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; words[i].length(); j++) &#123;</span><br><span class="line">                index = (<span class="keyword">int</span>)words[i].charAt(j) - <span class="number">65</span> - <span class="number">32</span>;</span><br><span class="line">                temp = temp.concat(s[index]);</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-合并二叉树"><a href="#9-合并二叉树" class="headerlink" title="9.合并二叉树"></a>9.合并二叉树</h3><p><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">合并二叉树</a>:给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。<br>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \   \ </span><br><span class="line"> 5   4   7</span><br><span class="line">注意: 合并必须从两个树的根节点开始。</span><br></pre></td></tr></table></figure><h4 id="答案一-7"><a href="#答案一-7" class="headerlink" title="答案一"></a>答案一</h4><p><code>Java</code>解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">meregeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode result = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">        result.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">        result.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案二-4"><a href="#答案二-4" class="headerlink" title="答案二"></a>答案二</h4><p><code>JavaScript</code>解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="function"><span class="keyword">function</span>(<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t1 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t1.val = t1.val + t2.val;</span><br><span class="line">    t1.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">    t1.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="10-翻转图像"><a href="#10-翻转图像" class="headerlink" title="10.翻转图像"></a>10.翻转图像</h3><p><a href="https://leetcode-cn.com/problems/flipping-an-image/">翻转图像</a>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。<br>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。<br>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [[1,1,0],[1,0,1],[0,0,0]]</span><br><span class="line">输出: [[1,0,0],[0,1,0],[1,1,1]]</span><br><span class="line">解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；</span><br><span class="line">     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</span><br><span class="line">输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br><span class="line">解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；</span><br><span class="line">     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">1 &lt;= A.length = A[0].length &lt;= 20</span><br><span class="line">0 &lt;= A[i][j] &lt;= 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案一-8"><a href="#答案一-8" class="headerlink" title="答案一"></a>答案一</h4><p>分析：最简单的方法就是按部就班来实现，先进行水平再进行图片反转。<br>对于1和0的翻转有两种方式</p><ul><li>1 - 当前值 得到的是1和0的翻转</li><li>1 ^ 当前值 得到的也是0和1的反转。这个符号是异或，相同为0，相异为1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = A.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> re = A[i].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> im = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; re.length; j++) &#123;</span><br><span class="line">               im += <span class="built_in">Number</span>(re[j]) === <span class="number">0</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i] = im.split(<span class="string">&#x27;&#x27;</span>).reverse();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="答案二-5"><a href="#答案二-5" class="headerlink" title="答案二"></a>答案二</h4><p>数组api一行解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.map(<span class="function"><span class="params">val</span> =&gt;</span> val.reverse().map(<span class="function"><span class="params">v</span> =&gt;</span> (<span class="number">1</span> - v)))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="答案三"><a href="#答案三" class="headerlink" title="答案三"></a>答案三</h4><p>双向指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Alen = A.length;</span><br><span class="line">    <span class="keyword">let</span> len = A[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; Alen; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = A[i][left];</span><br><span class="line">            A[i][left] = A[i][right] ^ <span class="number">1</span>;</span><br><span class="line">            A[i][right] = temp ^ <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将LeetCode刷过的题目进行简单的总结和记录，便于自己进行复习，同时将看到的解题思路进行汇总让其他的小伙伴能够理解。&lt;/p&gt;
&lt;h3 id=&quot;1-宝石与石头&quot;&gt;&lt;a href=&quot;#1-宝石与石头&quot; class=&quot;headerlink&quot; title=&quot;1.宝石与石头&quot;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://sdongzhi.com/categories/LeetCode/"/>
    
    
    <category term="基础" scheme="https://sdongzhi.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="面试" scheme="https://sdongzhi.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="LeetCode" scheme="https://sdongzhi.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>搭建门户网站技术选型</title>
    <link href="https://sdongzhi.com/2018/10/21/scaffold-front-www/"/>
    <id>https://sdongzhi.com/2018/10/21/scaffold-front-www/</id>
    <published>2018-10-21T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>工作多年，项目越来越多，总是要做一些重复性的工作开进行开发，每次东配置西配置一大堆，效率很低无法直接投入生产。<br>通过这篇文章梳理一下自己的知识点，将一些常用技术做一些总结归纳和复习。并且基于此开发一套模版，用于以后网站开发直接套用，不做重复性的工作（这里的网站主要针对pc）。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>从前端的角度来说，如何从零开始开发一个门户网站呢？ 首先是要有一些基础知识包括<code>JavaScript</code>, <code>css</code>, <code>html</code>。</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>关于<code>html</code>需要了解的是，语义化的标签，还有html模版。一个html应该有什么呢，我们通过一个html模版来看下<a href="https://github.com/h5bp/html5-boilerplate">html5-boilerplate</a>, 这是一个专业的前端模版html。 由于篇幅问题就不再这里展开大家可以去github仓库中的dist文件夹查看index.html。<br>我们简单介绍下其中用到的东西</p><p>首先是通用的html5的头<code><!doctype html></code></p><p>在HTML中，doctype是所有文档顶部所需的“ 序言“。其唯一目的是防止浏览器在呈现文档时转换成所谓的“怪异”模式; 也就是说，doctype确保浏览器尽力尝试遵循相关规范，而不是使用与某些规范不兼容的不同渲染模式。DOCTYPE用来告知 Web 浏览器页面使用了哪种 HTML 版本,只有确定了一个正确的文档类型，HTML或XHTML中的标签和层叠样式表才能生效，甚至对JavaScript脚本都会有所影响。</p><p> 还有这个Meta标签，如果您需要支持IE9或IE8，那么建议使用该标签， 如果支持最新的IE11或Edge则考虑删除此标签<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br></pre></td></tr></table></figure><br> 这个X-UA标记允许web作者选择呈现页面的Internet Explore版本，具体解释请看<a href="https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do">这篇文章</a></p><p>然后这里还用到了<a href="https://necolas.github.io/normalize.css/">normalize.css</a>,来消除不通浏览器之间的样式差异。<br>还使用了<a href="https://modernizr.com/">modernizr</a>，来进行浏览器功能检查。<br>以及大家最熟悉的jQuery(如果只兼容IE9+则可以放心使用最新版本，如果需要支持IE8则需要使用2.0以下的版本)</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>css我们先前在模版中已经引入了<a href="https://necolas.github.io/normalize.css/">normalize.css</a>, 其余css基础知识的获取就需要大家自行补充了，建议读一下《css权威指南》，算是css内功方面的书籍了，再就是了解css的布局包括栅格布局，flex布局， 还有更早期的双飞翼布局，圣杯布局等等。</p><p>除了这些基础实战中我们通常会用到css预处理器，<a href="https://sass-lang.com/">Sass</a>、<a href="http://lesscss.org/">Less</a>和<a href="http://stylus-lang.com/">Stylus</a>. 最开始我使用的是sass，但是这个的npm包经常会被墙下载不下来，相关依赖感觉也比较重。至于选哪种看大家喜好了，我推荐使用stylus，语法自由度很高，代码非常简洁。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>什么是最轻量的JavaScript框架,那就是<a href="http://vanilla-js.com/">vanilla-js</a> 来自<a href="https://segmentfault.com/a/1190000000355277"> Vanilla JS——世界上最轻量的JavaScript框架（没有之一）</a>,这里是个玩笑，因为这里说的框架其实就是原生Js。<br>大型网站的开发还是需要依赖各种js的库或者框架。这里简单列几种，</p><ul><li>jQuery，虽然有些人抵触，但是为了保证代码兼容性，我还是愿意引入jQuery的</li><li>Backbone， 一款轻量级的框架，不过需要配合underscore或者lodash使用</li><li><a href="https://github.com/wycats/handlebars.js">Handlebars</a>, js模版用来处理html代码片段</li></ul><p>具体代码可以考虑使用ES5如果这样的话需要引入<a href="https://babeljs.io/">babeljs</a>,做转换这样就可以愉快的使用新语法了，除此之外我们的选择还有<a href="https://coffeescript.org/">CoffeeScript</a>, 和<a href="https://www.typescriptlang.org/">TypeScript</a>. </p><p>代码规范可以可以参考<a href="https://codeburst.io/5-javascript-style-guides-including-airbnb-github-google-88cbc6b2b7aa">这篇文章</a><br>我推荐使用其中更为广泛的<a href="https://github.com/airbnb/javascript">Airbnb Standard</a> 比<a href="https://github.com/standard/standard">JavaScript Standard Style</a> 更多的star。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>好了前期准备工作已经完成现在我们开始正式开始</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;工作多年，项目越来越多，总是要做一些重复性的工作开进行开发，每次东配置西配置一大堆，效率很低无法直接投入生产。&lt;br&gt;通过这篇文章梳理一下自</summary>
      
    
    
    
    <category term="脚手架" scheme="https://sdongzhi.com/categories/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
    
    <category term="工具" scheme="https://sdongzhi.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="脚手架" scheme="https://sdongzhi.com/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>安卓和IOS前端页面调试</title>
    <link href="https://sdongzhi.com/2018/10/20/debug-webview/"/>
    <id>https://sdongzhi.com/2018/10/20/debug-webview/</id>
    <published>2018-10-20T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>我们通常会有这样的开发场景， 开发了一些前端页面，可能在手机浏览器打开，也可能在客户端的webview打开，对应不同的场景我们可能需要不通的手段来进行调试。<br>对于简单的页面我们一般可以通过chrome的开发工具来调试或者通过safari来直接对手机打开的页面直接进行调试。 但是对于复杂webview我们可能需要一些特殊手段来进行debug.</p><p>在本文将总结一部分调试技巧</p><table><thead><tr><th>方法分类</th><th align="right">难度</th><th align="center">调试目标</th><th align="center">调试效果</th><th align="center">优先级</th></tr></thead><tbody><tr><td>Chrome自带模拟器</td><td align="right">简单</td><td align="center">所有</td><td align="center">模拟效果，基本能调试 UI 及标准 JS 所有问题</td><td align="center">极高</td></tr><tr><td>chrome://inspect</td><td align="right">简单</td><td align="center">安卓的自带浏览器+webview</td><td align="center">真机调试效果显著</td><td align="center">高</td></tr><tr><td>spy-debugger</td><td align="right">一般</td><td align="center">所有页面不管是否是webview</td><td align="center">效果可以</td><td align="center">高</td></tr><tr><td>safari开发模式</td><td align="right">简单</td><td align="center">手机safari的所有页面</td><td align="center">真机调试效果显著</td><td align="center">高</td></tr><tr><td>xcode的iPhone模拟器</td><td align="right">较难</td><td align="center">webview和手机浏览器</td><td align="center">调试效果显著</td><td align="center">中等</td></tr><tr><td>weinre</td><td align="right">一般</td><td align="center">所有页面不管是否是webview</td><td align="center">需要注入代码效果一般</td><td align="center">低</td></tr><tr><td>微信开发者工具</td><td align="right">一般</td><td align="center">模拟手机</td><td align="center"></td><td align="center">低</td></tr><tr><td>TBS Studio</td><td align="right">一般</td><td align="center">模拟手机</td><td align="center"></td><td align="center">未测试</td></tr><tr><td>Browsersync</td><td align="right">一般</td><td align="center">模拟手机</td><td align="center"></td><td align="center">未测试</td></tr></tbody></table><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>对于抓包有很多工具比如 mac上面有 charles，wireShark， windows上面有fiddler 等等。<br>我常用的一个抓包工具叫 <a href="https://mitmproxy.org/">mitmproxy</a>, 在github已经一万多star了，使用起来比较简单。 一条命令 <code>mitmproxy -p 4000 --set console_mouse=false</code>, 启动后 手机手动代理到 ip+端口就可以开始抓包了，对于https可能需要<a href="http://mitm.it/">安装证书</a>.至于安装过程就不重复了，官网已有<a href="https://docs.mitmproxy.org/stable/">教程</a>。</p><p>charles抓包请查看<a href="https://www.jianshu.com/p/fdd7c681929c">这篇教程</a></p><h2 id="安卓的webview页面"><a href="#安卓的webview页面" class="headerlink" title="安卓的webview页面"></a>安卓的webview页面</h2><p>现在的安卓应用内的页面进行调试是真的方便。</p><ul><li>首先打开手机的usb调试，连接到电脑。</li><li>第二在chrome输入 <code>chrome://inspect/#devices</code> （开发环境安卓桌面版Chrome32+ 并且 Android 系统高于 4.4）</li><li>第三 选择app中的页面进行调试即可</li></ul><h2 id="safari调试iPhone页面"><a href="#safari调试iPhone页面" class="headerlink" title="safari调试iPhone页面"></a>safari调试iPhone页面</h2><p>这种方式适合手机上面的浏览器页面<br>需要几步配置</p><ul><li><p>首先打开电脑的safari<br><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/Safari%E8%AE%BE%E7%BD%AE.png" loading="lazy"></p></li><li><p>然后打开iPhone进行设置<br><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/iPhone%E8%AE%BE%E7%BD%AE.png" loading="lazy"></p></li><li><p>最后通过电脑的safari打开进行调试<br><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/%E5%BC%80%E5%90%AF%E8%B0%83%E8%AF%95.png" loading="lazy"></p></li></ul><h2 id="调试iPhone的webview"><a href="#调试iPhone的webview" class="headerlink" title="调试iPhone的webview"></a>调试iPhone的webview</h2><p>iPhone的webview可行的方法就是下载xcode，然后跟客户端开发借来一个xxx.app然后用模拟器打开，这样调试页面的时候可以调试各种情况下的页面，包括safari和应用内的页面。<br>这是目前唯一靠谱的调试方案。 还有一些 <a href="https://github.com/google/ios-webkit-debug-proxy">ios-webkit-debug-proxy</a> 和 <a href="https://github.com/RemoteDebug/remotedebug-ios-webkit-adapter">remotedebug-ios-webkit-adapter</a> 类似方案， 这些方案只能够调试手机的safari 对于app中的webview就无能为力了，而且经过本人实践效果并不理想，如果只是为了调试safari那还不如直接usb连接方便快捷，而且安装过程会有很多坑，因此不推荐使用。</p><p>简化方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//打开首页</span><br><span class="line">xcrun simctl openurl booted taobao://h5.m.taobao.com/guang/index.html</span><br><span class="line">// 打开模拟器</span><br><span class="line">open -a &quot;Simulator.app&quot; --args -CurrentDeviceUDID &quot;FCE2CFE8-64C3-4DBE-906B-B9BF4180DE49&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前提是安装了xcode， 本地需要一个sdk与测试网站进行交互方便获取app和执行本地shell命令<br>根据<a href="http://taobaofed.org/blog/2015/11/13/web-debug-in-ios/">此文章</a>, 后期开发一个测试环境用的本地调试网站。</p><p><a href="http://taobaofed.org/blog/2015/11/13/web-debug-in-ios/">http://taobaofed.org/blog/2015/11/13/web-debug-in-ios/</a></p><h2 id="weinre"><a href="#weinre" class="headerlink" title="weinre"></a>weinre</h2><p>Weinre 是一款较老的远程调试工具，功能与 Chrome DevTools 相似，需要在页面中插入一段 JS 脚本来实时调试页面 DOM 结构、样式、JS 等，另外它使用的是代理的方式，所以兼容性很好，无论是新老设备系统通吃，但对于样式调试不友善，缺少断点调试及 Profiles 等常用功能。</p><ul><li><p>安装 Weinre</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm -g install weinre</span><br></pre></td></tr></table></figure></li><li><p>启动Weinre监听服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ weinre --boundHost 10.10.2.144 --httpPort 8090 </span><br></pre></td></tr></table></figure></li><li><p>使用chrome访问<br><a href="http://10.10.2.144:8090/">http://10.10.2.144:8090</a>, 然后将一段 JS 脚本 <script src="http://10.10.2.144:8090/target/target-script-min.js#anonymous"></script> 插入到需要调试的页面中，插入代码后手机访问调试页面。<br><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/weinre.png" loading="lazy"></p></li></ul><p>到这里还不算完，因为手动插入js不够优雅，所以这里采用js脚本注入<br>Tools –&gt; Rewrite 选中Enable Rewrite<br>这里我们需要使用到的是 Body，它的作用是对请求或响应内容进行匹配替换，按照下图的配置，通过将匹配到的响应内容 </body> 标签替换成需要插入到页面中的 JS 脚本，从而实现动态插入。<br><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/Charles_Rewrite.jpg" loading="lazy"></p><p><img src="https://cdn.darknights.cn/assets/images/in-post/debug-webview/Charles_Rewrite_Rule.jpg" loading="lazy"></p><h2 id="spy-debugger"><a href="#spy-debugger" class="headerlink" title="spy-debugger"></a>spy-debugger</h2><p><a href="https://github.com/wuchangming/spy-debugger">spy-debugger</a>跟微信开发这工具都在weinre的基础上简化了给页面添加js的步骤，它还对HTTPS的支持</p><p>安装spy-debugger<br>spy-debugger内部集成了<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html">weinre</a>、<a href="https://github.com/wuchangming/node-mitmproxy">node-mitmproxy</a>、<a href="https://github.com/alibaba/anyproxy">AnyProxy</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  sudo npm install spy-debugger -g</span><br></pre></td></tr></table></figure><p>安装https证书包括手机和PC。<br>执行启动特别酸爽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ spy-debugger -p 8888</span><br></pre></td></tr></table></figure><h2 id="TBS-Studio"><a href="#TBS-Studio" class="headerlink" title="TBS Studio"></a>TBS Studio</h2><p><a href="https://x5.tencent.com/guide/debug.html">TBS Studio</a></p><h2 id="微信-WebView-调试"><a href="#微信-WebView-调试" class="headerlink" title="微信 WebView 调试"></a>微信 WebView 调试</h2><p><a href="https://x5.tencent.com/tbs/guide/debug/season1.html">https://x5.tencent.com/tbs/guide/debug/season1.html</a></p><h2 id="browserSync"><a href="#browserSync" class="headerlink" title="browserSync"></a>browserSync</h2><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://75team.com/post/webview-debug.html">前端 WebView 指南之调试篇</a></li><li><a href="http://elevenbeans.github.io/2017/06/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/">移动端浏览器调试方法汇总</a></li><li><a href="https://aotu.io/notes/2017/02/24/Mobile-debug/index.html">移动端真机调试指南</a></li><li><a href="https://github.com/riskers/blog/issues/11">打造最舒适的webview调试环境</a></li><li><a href="http://yujiangshui.com/multidevice-frontend-debug/">移动端前端开发调试</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;我们通常会有这样的开发场景， 开发了一些前端页面，可能在手机浏览器打开，也可能在客户端的webview打开，对应不同的场景我们可能需要不通的</summary>
      
    
    
    
    <category term="调试" scheme="https://sdongzhi.com/categories/%E8%B0%83%E8%AF%95/"/>
    
    
    <category term="工具" scheme="https://sdongzhi.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="调试" scheme="https://sdongzhi.com/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JavaScript中卷(一)</title>
    <link href="https://sdongzhi.com/2018/10/18/read-book-you-known-middle-one/"/>
    <id>https://sdongzhi.com/2018/10/18/read-book-you-known-middle-one/</id>
    <published>2018-10-18T00:00:00.000Z</published>
    <updated>2021-09-26T09:54:12.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;foo&quot;;</span><br><span class="line">b = [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;];</span><br><span class="line"></span><br><span class="line">var c = Array.prototype.join.call(a, &quot;-&quot;);</span><br><span class="line"></span><br><span class="line">var d = Array.prototype.map.call(a, function(v) &#123;</span><br><span class="line">return v.toUpperCase() + &quot;.&quot;</span><br><span class="line">&#125;).join(&quot;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c; // &quot;f-o-o&quot;</span><br><span class="line"></span><br><span class="line">d; // &quot;F.O.O.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var a = 5E10;</span><br><span class="line"></span><br><span class="line">a; // 50000000000</span><br><span class="line"></span><br><span class="line">a.toExponential(); // &quot;5e+10&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// toFixed 用来显示小数部分的显示位数</span><br><span class="line">var a = 42.59;</span><br><span class="line"></span><br><span class="line">a.toFixed(0);  // &quot;43&quot;</span><br><span class="line"></span><br><span class="line">a.toFixed(1);  // &quot;42.6&quot;</span><br><span class="line"></span><br><span class="line">a.toFixed(2);  // &quot;42.59&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">42.toFixed(3); // SyntaxError 报错 42. 被视为一个整体 所以没有访问toFixed</span><br><span class="line"></span><br><span class="line">以下访问方式都没有问题</span><br><span class="line"></span><br><span class="line">(42).toFixed(3);  // &quot;42.000&quot;</span><br><span class="line">0.42.toFixed(3);  // &quot;0.420&quot;</span><br><span class="line">42..toFixed(3);   // &quot;42.000&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// toPrecision 方法用来制定有效数位的显示位数</span><br><span class="line"></span><br><span class="line">var a = 42.59;</span><br><span class="line"></span><br><span class="line">a.toPrecision(1); // &quot;4e+1&quot;</span><br><span class="line">a.toPrecision(2); // &quot;43&quot;</span><br><span class="line">a.toPrecision(3); // &quot;42.6&quot;</span><br><span class="line">a.toPrecision(4); // &quot;42.59&quot;</span><br><span class="line">a.toPrecision(5); // &quot;42.590&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2 === 0.3; // false</span><br><span class="line"></span><br><span class="line">由于浮点数的精读问题导致</span><br><span class="line">0.1 + 0.2; // 0.3000000000000004;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么如果判断0.1 + 0.2 和 0.3 是否相等呢， 最常见的做法是设置一个误差范围值， 通常称为”机器精度”， 对于JavaScript来说这个值通常是2^-52;<br>ES6开始，该值定义在<code>Number.EPSILON</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if(!Number.EPSILON) &#123;</span><br><span class="line">Number.EPSILON = Math.pow(2, -52);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function numbersCloseEnoughToEqual(n1, n2) &#123;</span><br><span class="line">return Math.abs(n1 - n2) &lt; Number.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = 0.1 + 0.2;</span><br><span class="line">var b = 0.3;</span><br><span class="line"></span><br><span class="line">numbersCloseEnoughToEqual(a, b);  // true;</span><br><span class="line"></span><br><span class="line">numbersCloseEnoughToEqual(0.0000001, 0.0000002); // false;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="整数检测"><a href="#整数检测" class="headerlink" title="整数检测"></a>整数检测</h2><p>要检测一个值是否是整数，可以使用ES6种的Number.isInteger方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Number.isInteger(42);     // true</span><br><span class="line"></span><br><span class="line">Number.isInteger(42.00);  // true</span><br><span class="line"></span><br><span class="line">Number.isInteger(45.3);   // false</span><br><span class="line"></span><br><span class="line">// ES6 之前的polyfill Number.isInteger</span><br><span class="line"></span><br><span class="line">if(!Number.isInteger) &#123;</span><br><span class="line">Number.isInteger = function(num) &#123;</span><br><span class="line">return typeof num == &#x27;number&#x27; &amp;&amp; num % 1 == 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 最大安全数</span><br><span class="line"></span><br><span class="line">Numbe.isSafeInteger(Number.MAX_SAFE_INTEGER); // true</span><br><span class="line">Numbe.isSafeInteger(Math.pow(2, 53)); // false</span><br><span class="line">Numbe.isSafeInteger(Math.pow(2, 53) - 1); // true</span><br><span class="line"></span><br><span class="line">// ES6 之前的polyfill Number.isSafeInteger</span><br><span class="line"></span><br><span class="line">if(!Number.isSafeInteger) &#123;</span><br><span class="line">Number.isSafeInteger = function(num) &#123;</span><br><span class="line">return Number.isInteger(num) &amp;&amp; Math.abs(num) &lt;= Number.MAX_SAFE_INTEGER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><p>JavaScript有一个常规的0(+0), 和一个-0<br>-0， 除了可以作为常量以外，也可以是某些数学运算的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = 0 / -3; // -0</span><br><span class="line"></span><br><span class="line">var b = 0 * -3; // -0</span><br><span class="line"></span><br><span class="line">加法和减法运算不会得到负零</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根据规范对于负零进行字符串化操作会返回&quot;0&quot;</span><br><span class="line">var a = -0;</span><br><span class="line"></span><br><span class="line">a.toString();</span><br><span class="line">a + &quot;&quot;;</span><br><span class="line">String(a);</span><br><span class="line">JSON.stringify(a)</span><br><span class="line"></span><br><span class="line">以上都会返回 &quot;0&quot;, 但是返回来将其从字符串转换为数字，得到的结果是准确的</span><br><span class="line"></span><br><span class="line">+&quot;-0&quot;;            // -0</span><br><span class="line">Number(&quot;-0&quot;);     // -0</span><br><span class="line">JSON.parse(&quot;-0&quot;); // -0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 === -0; // true</span><br><span class="line"></span><br><span class="line">0 == -0;  // true</span><br><span class="line"></span><br><span class="line">0 &gt; -0;    // false</span><br><span class="line"></span><br><span class="line">判断是否是 -0</span><br><span class="line"></span><br><span class="line">function isNegZero(n) &#123;</span><br><span class="line">n = Number(n);</span><br><span class="line"></span><br><span class="line">return (n === 0) &amp;&amp; (1 / n === -Infinity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isNegZero(-0);      // true</span><br><span class="line">isNegZero(0 / -3);  // true</span><br><span class="line">isNegZero(0);       // false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们为什么需要-0呢，有些应用程序中的数据需要以级数形式来表示(比如动画帧的移动速度), 数字的符号为sign用来代表其他信息(比如移动方向),此时如果一个值为0的变量失去了它的符号位，它的方向信息就回丢失。所以保留0值的符号为可以防止这类情况发生。</p><h2 id="特殊等式"><a href="#特殊等式" class="headerlink" title="特殊等式"></a>特殊等式</h2><p>如前所述，NaN和0在相等比较时表现有些特别，由于NaN和自身不相等，所以必须使用ES6中的Number.isNaN或者polyfill, 而 +0 和 -0 的比较我们也需要借助于 isNegZero这样的工具函数。</p><p>ES6引入了一个工具方法Object.is(…)来判断两个值是否绝对相等用来处理上面特殊情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = 2 / &quot;foo&quot;; </span><br><span class="line">var b = -3 * 0;</span><br><span class="line"></span><br><span class="line">Object.is(a, NaN); // true</span><br><span class="line"></span><br><span class="line">Object.is(b, -0);  // true</span><br><span class="line"></span><br><span class="line">Object.is(b, 0);   // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ES6之前的polyfill</span><br><span class="line"></span><br><span class="line">if(!Object.is) &#123;</span><br><span class="line">Object.is = function(v1, v2) &#123;</span><br><span class="line">//判断是否是-0</span><br><span class="line">if(v1 === 0 &amp;&amp; v2 === 0) &#123;</span><br><span class="line">return 1 / v1 === 1 / v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 判断是否是NaN</span><br><span class="line">if(v1 !== v1) &#123;</span><br><span class="line">return v2 !== v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return v1 === v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JSON字符串化"><a href="#JSON字符串化" class="headerlink" title="JSON字符串化"></a>JSON字符串化</h2><p>对于大多数简单值来说JSON字符串化和toString效果基本相同，只不过序列化的结构总是字符串<br>所有安全的JSON值都呈现为有效的JSON格式的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(42);  // &quot;42&quot;</span><br><span class="line">JSON.stringify(&quot;42&quot;) // &quot;&quot;42&quot;&quot;</span><br><span class="line">JSON.stringify(null) // &quot;null&quot;</span><br><span class="line">JSON.stringify(true) // &quot;true&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相对而言不安全的JSON值包括 undefined, function , symbol和包含循环引用的对象都不符合JSON的标准结构，其他支持JSON的语言无法处理它们。</p><p>JSON.toStringify(…)在处理对象中遇到undefined,function,Symbol是会自动将其忽略，在数组中则返回null，以保证单于位置不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(undefined)     // undefined</span><br><span class="line">JSON.stringify(function() &#123;&#125;)     // undefined</span><br><span class="line">JSON.stringify(</span><br><span class="line">[1, undefined, function() &#123;&#125;, 4] // &quot;[1, null, null, 4]&quot;</span><br><span class="line">)</span><br><span class="line">JSON.stringify(</span><br><span class="line">&#123;a: 2, b: function() &#123;&#125;&#125;         // &quot;&#123;&quot;a&quot;: 2&#125;&quot;</span><br><span class="line">) </span><br><span class="line">JSON.stringify(undefined) // undefined</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果对象定义了toJSON方法，JSON字符串化会首先调用该方法然后用它的返回值来进行序列化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line">var a = &#123;</span><br><span class="line">b: 42,</span><br><span class="line">c: o,</span><br><span class="line">d: function() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.e = a;</span><br><span class="line"></span><br><span class="line">//循环引用会报错</span><br><span class="line">// JSON.stringify(a);</span><br><span class="line"></span><br><span class="line">//自定义的JSON序列化</span><br><span class="line">a.toJSON = function() &#123;</span><br><span class="line">return &#123;b: this.b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JSON.stringify(a); // &quot;&#123;b: 42&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h2><p>几个不为人知的知识点,该方法可以传入一个replacer，它可以是数组或者函数，用来制定对象序列化过程中那些应该被处理，哪些应该被排除，如果replacer是一个数组，那么它必须是一个字符串数组，其中高喊序列化要处理的对象的属性名称。除此之外的其他属性被忽略。如果replacer是一个函数，它会对对象本身调用一次然后对对象中的每个属性各调用一次，每次传递两个参数key和value，如果要忽略某个key就返回undefined，否则返回指定值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;</span><br><span class="line">b: 42,</span><br><span class="line">c: &quot;42&quot;,</span><br><span class="line">d: [1,2,3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JSON.stringify(a, [&quot;b&quot;, &quot;c&quot;]); // &quot;&#123;&quot;b&quot;: 42, &quot;c&quot;: &quot;42&quot;&#125;&quot;</span><br><span class="line"></span><br><span class="line">JSON.stringify(a, function(k, v) &#123;</span><br><span class="line">if(k !== &quot;c&quot;) return v;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// &quot;&#123;&quot;b&quot;: 42, &quot;d&quot;: [1,2,3]&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JSON.stringify还有一个可选参数space用来指定输出的缩进格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;</span><br><span class="line">b: 42,</span><br><span class="line">c: &quot;42&quot;,</span><br><span class="line">d: [1,2,3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JSON.stringify(a, null, 3);</span><br><span class="line"></span><br><span class="line">JSON.stringify(a, null, &#x27;---------&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h2><p>true转换为1，false转换为0，undefined转换为NaN，null转为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number(&quot;&quot;);  // 0</span><br><span class="line">Number([]);  // 0</span><br><span class="line">Number([&quot;abc&quot;]);  // NaN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="奇特的～运算符"><a href="#奇特的～运算符" class="headerlink" title="奇特的～运算符"></a>奇特的～运算符</h2><p>字位运算只适用于32位整数，运算符将会强制操作数使用32位格式。 ToInt32首先执行ToNumber 然后执行ToInt32，虽然严格来说并非强制类型转换，但是字位运算符和一些特殊数字一起使用时会产生类似强制类型转换的效果，返回另外一个数字<br>例如<code>|</code>的空操作,会将后面转为数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 | -0;        // 0</span><br><span class="line">0 | NaN;       // 0</span><br><span class="line">0 | Infinity;  //0</span><br><span class="line">0 | -Infinity; //0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单来说～ 可以理解为<code>-(x+1)</code>， </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">～42; // -43</span><br><span class="line"></span><br><span class="line">~-1; // 0</span><br><span class="line"></span><br><span class="line">var a = &quot;Hello world&quot;;</span><br><span class="line"></span><br><span class="line">~a.indexOf(&quot;lo&quot;);  // -4</span><br><span class="line"></span><br><span class="line">~a.indexOf(&quot;ol&quot;); // 0</span><br><span class="line"></span><br><span class="line">if(!~a.indexOf(&quot;ol&quot;)) &#123;</span><br><span class="line">// 无匹配</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字位截取"><a href="#字位截取" class="headerlink" title="~~字位截取"></a>~~字位截取</h2><p>有些开发人员使用<code>~~</code>来借去数字值的消暑部分，以为这和Math.floor的效果一样，实际上并非如此<br>~~它首先只适用于32位数字，更重要的是它对负数的处理和Math.floor不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(-49.6); // -50  </span><br><span class="line">~~-49.6;      // -49 该方法会舍弃</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示解析数字字符串"><a href="#显示解析数字字符串" class="headerlink" title="显示解析数字字符串"></a>显示解析数字字符串</h2><p>parseInt是解析，允许字符串中出现非数字字符，解析从左到右遇到非数字字符就停止。而转换Number不允许出现非数字字符，否则会失败并返回NaN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;42&quot;;</span><br><span class="line">var b = &quot;42px&quot;;</span><br><span class="line"></span><br><span class="line">Number(a); // 42</span><br><span class="line">parseInt(a); // 42</span><br><span class="line"></span><br><span class="line">Number(b); // NaN</span><br><span class="line">parseInt(b) // 42</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>parseInt和parseFloat是针对字符串值，所以传递其他类型的值是没有用的，他们会被强制类型转换成字符串。</p><p>ES5之前的一个坑就是如果没有指定第二个参数来给定转换基数，则会以第一个参数的第一个字符来自行决定。如果第一个字符是 x 或者 X 则转换为十六进制， 如果是0则转换为八进制。</p><p>如下代码如果值为08:09 ,转换后的值为0:0 因为 8 和 9 都不是有效的八进制数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var hour = parseInt(selectHour.value);</span><br><span class="line">var minute = parseInt(selectMinute.value);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将第二个参数设置为10即可避免这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var hour = parseInt(selectHour.value, 10);</span><br><span class="line">var minute = parseInt(selectMinute.value, 10);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>幸运的是从ES5开始<code>parseInt(...)</code>默认转换为十进制， 除非另外指定。如果你的代码在ES5之前的环境运行，请记得将第二个值设置为10.</p><p>有这样一个坑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parseInt(1/0, 19); // 18</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里parseInt接收字符串参数, 所以 Infinity 被转换为 “Infinity”; 19也不是一个正规的基数，所以这里其实是在转换 parseInt(“Infinity”, 19);</p><p>按照十六进制表示规则 a =&gt; 10, b =&gt; 11, c =&gt; 12, … i =&gt; 18 … z =&gt; 35; 基数是19所有小于19的字母都是有效数字。</p><p>此外还有一些看起来奇怪但是解释的通的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 这个例子 小数点后六位之前转为 0</span><br><span class="line">parseInt(0.000008); // 0    </span><br><span class="line">//但是小数点后七位就转为 8e-7 再转字符串&quot;8e-7&quot; 8是有效数字</span><br><span class="line">parseInt(0.0000008); // 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// &quot;fa&quot;都是有效数字 f = 15 a = 10;  15 * 16 + 10 = 250</span><br><span class="line">parseInt(false, 16); // 250</span><br><span class="line"></span><br><span class="line">//parseInt.toString()</span><br><span class="line">//&quot;function parseInt() &#123; [native code] &#125;&quot;</span><br><span class="line">//&quot;f&quot;解析位16进制的15</span><br><span class="line">parseInt(parseInt, 16); // 15</span><br><span class="line"></span><br><span class="line">//16进制的10 就是16</span><br><span class="line">parseInt(&quot;0x10&quot;); // 16</span><br><span class="line">// 3不是有效的二进制， 只解析 10, 2进制的10  就是十进制的2</span><br><span class="line">parseInt(&quot;103&quot;, 2) // 2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p><code>null</code>和<code>undefined</code> 之间<code>==</code>比较</p><ul><li>如果x为null， y是undefined 结果为true</li><li>如果x为undefined， y是null 结果为true</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var a = null;</span><br><span class="line">var b;</span><br><span class="line"></span><br><span class="line">a == b;    // true</span><br><span class="line">a == null; // true</span><br><span class="line">b == null; // true</span><br><span class="line"></span><br><span class="line">a == false; // false</span><br><span class="line">b == false; // false</span><br><span class="line">a == &quot;&quot;;    // false</span><br><span class="line">b == &quot;&quot;;    // false</span><br><span class="line">a == 0;     // false</span><br><span class="line">b == 0;     // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var a = doSomething();</span><br><span class="line"></span><br><span class="line">if(a == null) &#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br><span class="line">条件判断 a == null 仅在 doSomething() 返回 null 和 undefined时才成立，除此之外其他值不成立包括0, false 和&quot;&quot;这样的假植</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象和非对象之间的比较</p><ul><li>如果Type(x)是字符串或者数字， Type(y)是对象， 则返回 x == ToPrimitive(y)的结果</li><li>如果Type(x)是对象， Type(y)是字符串或者数字， 则返回 ToPrimitive(x) == y的结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = 42;</span><br><span class="line">var b = [42];</span><br><span class="line"></span><br><span class="line">a == b; // true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var a = &quot;abc&quot;;</span><br><span class="line">var b = Object(a);  // 和 new String(a) 一样</span><br><span class="line"></span><br><span class="line">a == b;  // true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是有一些值不这样， 原因是==算法中其他优先级更高的规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = null;</span><br><span class="line">var b = Object(a); // 和Object()一样</span><br><span class="line"></span><br><span class="line">a == b;  // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var c = undefined;</span><br><span class="line">var d = Object(c); // 和Object一样</span><br><span class="line">c == d; // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var e = NaN;</span><br><span class="line">var f = Object(e); // 和new Number(e)一样</span><br><span class="line"></span><br><span class="line">e == f; // false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为没有对应的封装对象所以null和undefined不能够被封装， <code>Object(null)</code>, <code>Object(undefined)</code>，都返回一个常规对象。NaN能被封装为数字封装对象，但是拆封之后NaN == NaN返回false， 因为NaN不等于NaN。</p><p>比较少见的情况<br>2 == 3 不会有这种情况， new Number会调用valueOf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number.prototype.valueOf = function()&#123;</span><br><span class="line">return 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Numebr(2) == 3; // true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假值相等比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;0&quot; == null;      // false</span><br><span class="line">&quot;0&quot; == undefined; // false</span><br><span class="line">&quot;0&quot; == false;     // true</span><br><span class="line">&quot;0&quot; == NaN;       // false</span><br><span class="line">&quot;0&quot; == 0;        // true</span><br><span class="line">&quot;0&quot; == &quot;&quot;;       // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">false == null;      // false</span><br><span class="line">false == undefined; // false</span><br><span class="line">false == NaN;       // false</span><br><span class="line">false == 0;        // true</span><br><span class="line">false == &quot;&quot;;       // true</span><br><span class="line">false == [];       // true</span><br><span class="line">false == &#123;&#125;;       // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot; == null;      // false</span><br><span class="line">&quot;&quot; == undefined; // false</span><br><span class="line">&quot;&quot; == NaN;       // false</span><br><span class="line">&quot;&quot; == 0;        // true</span><br><span class="line">&quot;&quot; == [];       // true</span><br><span class="line">&quot;&quot; == &#123;&#125;;       // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 == null;      // false</span><br><span class="line">0 == undefined; // false</span><br><span class="line">0 == NaN;       // false</span><br><span class="line">0 == [];       // true</span><br><span class="line">0 == &#123;&#125;;       // false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个最好</span><br><span class="line"></span><br><span class="line">[] == ![]  // true</span><br><span class="line"></span><br><span class="line">2 == [2] // true</span><br><span class="line">&quot;&quot; == [null] // true</span><br><span class="line"></span><br><span class="line">0 == &quot;\n&quot;   // true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抽象关系的比较</p><p>双方先调用toPrimitive，如果结果出现非字符串，就根据toNumber规则将双方强制转换为数字进行比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var a = [42];</span><br><span class="line">var b = &quot;43&quot;;</span><br><span class="line"></span><br><span class="line">a &lt; b; // true</span><br><span class="line">b &lt; a; // false</span><br><span class="line"></span><br><span class="line">如果双方都是字符串，则按照字母顺序比较</span><br><span class="line"></span><br><span class="line">var a = [&quot;42&quot;];</span><br><span class="line">var b = [&quot;043&quot;];</span><br><span class="line"></span><br><span class="line">a &lt; b;  // false</span><br><span class="line">a和b不转为数字，因为你toPrimitive返回的字符串这里比较的是&quot;42&quot; 和 &quot;043&quot;两个字符串，比较的是&quot;4&quot; 和&quot;0&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var a = [4, 2];</span><br><span class="line">var b = [0, 4, 3];</span><br><span class="line"></span><br><span class="line">a &lt; b; // false  比较 &quot;4, 2&quot; 和 &quot;0, 4, 3&quot;的首字母</span><br><span class="line"></span><br><span class="line">var a = &#123; b: 42 &#125;;</span><br><span class="line">var b = &#123; b: 43 &#125;;</span><br><span class="line"></span><br><span class="line">a &lt; b;  // false 转为&quot;[object Object]&quot; 和&quot;[object Object]&quot;所以按照字母顺序比较并不成立</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的例子比较奇怪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123; b: 42 &#125;;</span><br><span class="line">var b = &#123; b: 43 &#125;;</span><br><span class="line"></span><br><span class="line">a &lt; b; // false</span><br><span class="line"></span><br><span class="line">a == b; // false</span><br><span class="line"></span><br><span class="line">a &gt; b; // false</span><br><span class="line"></span><br><span class="line">a &lt;= b; // true</span><br><span class="line">a &gt;= b; // true</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据规范 a &lt;=b 被处理成 !(a &gt; b)</p><h2 id="JavaScript表达式"><a href="#JavaScript表达式" class="headerlink" title="JavaScript表达式"></a>JavaScript表达式</h2><p>表达式的副作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 42;</span><br><span class="line">var b = a++;</span><br><span class="line"></span><br><span class="line">a; // 43</span><br><span class="line"></span><br><span class="line">b; // 42</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>标签表达式 break; continue;</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">运算符优先级</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="读书总结" scheme="https://sdongzhi.com/categories/%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="javascript" scheme="https://sdongzhi.com/tags/javascript/"/>
    
    <category term="读书总结" scheme="https://sdongzhi.com/tags/%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
